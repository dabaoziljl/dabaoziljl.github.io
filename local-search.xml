<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>密码记录表</title>
    <link href="/2022/10/21/%E5%AF%86%E7%A0%81%E8%AE%B0%E5%BD%95%E8%A1%A8/"/>
    <url>/2022/10/21/%E5%AF%86%E7%A0%81%E8%AE%B0%E5%BD%95%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<ul><li><p>网易邮箱</p><ul><li><a href="mailto:&#x79;&#x69;&#x67;&#101;&#x64;&#97;&#x62;&#x61;&#111;&#122;&#105;&#49;&#x35;&#49;&#49;&#64;&#x31;&#x32;&#x36;&#x2e;&#99;&#111;&#x6d;">&#x79;&#x69;&#x67;&#101;&#x64;&#97;&#x62;&#x61;&#111;&#122;&#105;&#49;&#x35;&#49;&#49;&#64;&#x31;&#x32;&#x36;&#x2e;&#99;&#111;&#x6d;</a></li><li>jpx6hm99x8wBNKW</li></ul></li><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nnUNet的安装与基本使用</title>
    <link href="/2022/10/19/nnUNet%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/19/nnUNet%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="nnUNet的安装与基本使用"><a href="#nnUNet的安装与基本使用" class="headerlink" title="nnUNet的安装与基本使用"></a>nnUNet的安装与基本使用</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​因为最近需要一个能够使用二维模型进行三维医学图像分割的框架，然后将视频分割的思想融入进去。考虑到目前大多数新的模型要么是专门为某几个任务设计的，要么为了追求性能使用了三维模型，因此我想到了之前非常火的nnUNet。目前的考虑是，使用nnUNet作为二维分割的基础框架，然后进行修改以融入视频分割的帧间信息。这样不仅能够做不同模型之间的对比，也方便在不同的医学影像分割任务上都进行性能的验证。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>为了不与之前做脑肿瘤分割的brats环境冲突，打算另起炉灶，新建了一个nnunet的环境</li><li>使用了比较新的torch1.10.1</li><li>按照官方说明进行了完整版本的安装，</li></ul><h2 id="数据处理与环境变量设置"><a href="#数据处理与环境变量设置" class="headerlink" title="数据处理与环境变量设置"></a>数据处理与环境变量设置</h2><p>​nnunet的三个关键路径分别设置为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> nnUNet_raw_data_base=<span class="hljs-string">&quot;/home/lijl/data/nnUNet_raw&quot;</span><br><span class="hljs-built_in">export</span> nnUNet_preprocessed=<span class="hljs-string">&quot;/home/lijl/data/nnUNet_preprocessed&quot;</span><br><span class="hljs-built_in">export</span> RESULTS_FOLDER=<span class="hljs-string">&quot;/home/lijl/data/nnUNet_trained_models&quot;</span><br></code></pre></td></tr></table></figure><h2 id="如何在新的数据集上使用nnUNet"><a href="#如何在新的数据集上使用nnUNet" class="headerlink" title="如何在新的数据集上使用nnUNet"></a>如何在新的数据集上使用nnUNet</h2><h4 id="step1、数据集转换"><a href="#step1、数据集转换" class="headerlink" title="step1、数据集转换"></a>step1、数据集转换</h4><ul><li>将原始数据放在nnUNet_raw_data_base&#x2F;nnUNet_raw_data上，并命名为Task001_XXX。</li><li>每一个子任务文件夹下需要有几个子文件(夹)</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Task001_BrainTumour/<br>├── dataset.json<br>├── imagesTr<br>├── (imagesTs)<br>└── labelsTr<br></code></pre></td></tr></table></figure><ul><li>所有图像必须是.nii.gz格式的，并且有唯一的标识ID。</li><li>图像的命名可以为case_identifier_XXXX.nii.gz，其中XXXX为模态标识符。</li><li>标签的命名可以为case_identifier.nii.gz</li><li>nnunet&#x2F;dataset_conversion&#x2F;utils.py  下有相关的生成dataset.json的代码做参考</li></ul><h4 id="step2、实验规划与预处理"><a href="#step2、实验规划与预处理" class="headerlink" title="step2、实验规划与预处理"></a>step2、实验规划与预处理</h4><ul><li>以下命令会预处理原始数据并生成相应的模型配置。–verify_dataset_integrity用来检查准备的数据的合理性。</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">nnUNet_plan_and_preprocess -t XXX <span class="hljs-comment">--verify_dataset_integrity</span><br></code></pre></td></tr></table></figure><h4 id="step3、模型训练"><a href="#step3、模型训练" class="headerlink" title="step3、模型训练"></a>step3、模型训练</h4><p>nnUNet_train CONFIGURATION TRAINER_CLASS_NAME TASK_NAME_OR_ID FOLD  –npz (additional options)</p><ul><li>2D UNet</li></ul><blockquote><p> nnUNet_train 2d nnUNetTrainerV2 TaskXXX_MYTASK FOLD –npz</p></blockquote><ul><li>3D full resolution UNet</li></ul><blockquote><p>nnUNet_train 3d_fullres nnUNetTrainerV2 TaskXXX_MYTASK FOLD –npz</p></blockquote><ul><li>3D low resolution UNet</li></ul><blockquote><p>nnUNet_train 3d_lowres nnUNetTrainerV2 TaskXXX_MYTASK FOLD –npz</p></blockquote><ul><li>3D cascade</li></ul><blockquote><p>nnUNet_train 3d_cascade_fullres nnUNetTrainerV2CascadeFullRes TaskXXX_MYTASK FOLD –npz</p></blockquote><p>​–npz用来生成验证集的softmax输出，会占用较大的空间。如果在训练时没有–npz但仍然需要的话，可以使用如下方法再跑一次验证集。</p><h4 id="4、找出最合适的模型配置"><a href="#4、找出最合适的模型配置" class="headerlink" title="4、找出最合适的模型配置"></a>4、找出最合适的模型配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nnUNet_find_best_configuration -m 2d 3d_fullres 3d_lowres 3d_cascade_fullres -t XXX --strict<br></code></pre></td></tr></table></figure><h4 id="5、模型推理"><a href="#5、模型推理" class="headerlink" title="5、模型推理"></a>5、模型推理</h4><p>​    推理过程中使用的数据集 imagesTs必须与训练集又相同的格式。</p><p>​nnUNet_find_best_configuration会输出我需要的推理命令，这是最简单的执行推理的方法。</p><ul><li>以下命令为对制定的配置进行预测推理</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nnUNet_predict -i INPUT_FOLDER -o OUTPUT_FOLDER -t TASK_NAME_OR_ID -m CONFIGURATION --save_np<br></code></pre></td></tr></table></figure></blockquote><ul><li>以下命令对已经生成的预测结果进行ensemble</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nnUNet_ensemble -f FOLDER1 FOLDER2 ... -o OUTPUT_FOLDER -pp POSTPROCESSING_FILE<br></code></pre></td></tr></table></figure></blockquote><h4 id="6、如何扩展nnUNet"><a href="#6、如何扩展nnUNet" class="headerlink" title="6、如何扩展nnUNet"></a>6、如何扩展nnUNet</h4><ul><li>使用新的模型。创建的模型需要提供nnUNet所需要的一些参数，比如下采样的次数，深度监督是否被使用，使用多大的卷积核，对可能使用空间大小的估计等等。</li></ul><h2 id="针对nnUNet原版本的一些搞改动"><a href="#针对nnUNet原版本的一些搞改动" class="headerlink" title="针对nnUNet原版本的一些搞改动"></a>针对nnUNet原版本的一些搞改动</h2><ul><li>通过max_num_epochs, 修改总共的训练周期数。</li></ul><p><a href="https://imgse.com/i/xc4ri6"><img src="https://s1.ax1x.com/2022/10/22/xc4ri6.png" alt="xc4ri6.png"></a></p><ul><li>在evaluate_regions函数中，加入对HD95指标的计算，并写入summary.csv中.</li></ul><blockquote><p>实现的方式时在evaluate_regions中改动写入csv的方式，以及在evaluate_case中加入hd95的计算。</p></blockquote><ul><li><p>为了融合视频分割的idea，需要修改dataset，使得每次出来的不是一个二维切片，而是当前的二维切片加上之前几个切片的信息。</p><blockquote><p>通过控制extra_slice_num参数来调节需要的前置切片数</p></blockquote></li><li><p>为了融合视频分割的idea，网络模型需要修改</p><blockquote><p>添加额外的输入x_pre，然后提取特征并做后续的操作。 </p></blockquote></li><li><p>为了融合视频分割的idea，分割结果的推理部分也需要修改。</p></li></ul><blockquote><p>在模型的predict_3D方法中改</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学习ing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>labuladong刷题笔记</title>
    <link href="/2022/10/19/labuladong%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/19/labuladong%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="小李对labuladong-的算法小抄-的学习-进行中。。。"><a href="#小李对labuladong-的算法小抄-的学习-进行中。。。" class="headerlink" title="小李对labuladong 的算法小抄 的学习 进行中。。。"></a>小李对<a href="https://labuladong.github.io/algo/">labuladong 的算法小抄</a> 的学习 进行中。。。</h1><h2 id="第零章-核心框架汇总"><a href="#第零章-核心框架汇总" class="headerlink" title="第零章 核心框架汇总"></a>第零章 核心框架汇总</h2><h3 id="1、学习算法和刷题的框架思维"><a href="#1、学习算法和刷题的框架思维" class="headerlink" title="1、学习算法和刷题的框架思维"></a>1、学习算法和刷题的框架思维</h3><ul><li>数据结构的存储方式</li></ul><blockquote><p>数组（顺序存储）和链表（链式存储）</p></blockquote><ul><li>数据结构的基本操作</li></ul><blockquote><p>遍历 ， 访问， 高效的增删改查</p></blockquote><h3 id="2、我的刷题心得"><a href="#2、我的刷题心得" class="headerlink" title="2、我的刷题心得"></a>2、我的刷题心得</h3><ul><li><p>穷举的两个关键点：无遗漏，无冗余</p></li><li><p>数组&#x2F;单链表 技巧：双指针，二分，滑动窗口，回文串，前缀，差分数组</p></li><li><p>二叉树 技巧：遍历二叉树；分解问题</p></li><li><p>..</p></li></ul><blockquote><p>框架汇总实际上是对所有算法的核心思想的整理，打算到最后来看。</p></blockquote><h2 id="手把手刷数据结构"><a href="#手把手刷数据结构" class="headerlink" title="手把手刷数据结构"></a>手把手刷数据结构</h2><h3 id="1、链表"><a href="#1、链表" class="headerlink" title="1、链表"></a>1、链表</h3><h3 id="双指针技巧秒杀七道链表题目"><a href="#双指针技巧秒杀七道链表题目" class="headerlink" title="双指针技巧秒杀七道链表题目"></a>双指针技巧秒杀七道链表题目</h3><ul><li>合并两个有序链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">if</span> list1 == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> list2 == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <br>        dummy = ListNode()<br>        tmp = dummy<br>        <span class="hljs-keyword">while</span> list1 <span class="hljs-keyword">and</span> list2:<br>            <span class="hljs-keyword">if</span> list1.val &lt; list2.val:<br>                tmp.<span class="hljs-built_in">next</span>=list1<br>                tmp = tmp.<span class="hljs-built_in">next</span><br>                list1 = list1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp.<span class="hljs-built_in">next</span>=list2<br>                tmp = tmp.<span class="hljs-built_in">next</span><br>                list2 = list2.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-keyword">if</span> list1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            tmp.<span class="hljs-built_in">next</span>=list1<br>        <span class="hljs-keyword">if</span> list2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            tmp.<span class="hljs-built_in">next</span> = list2<br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>当你需要创造一条新链表的时候，可以使用虚拟头结点简化边界情况的处理</strong></p></blockquote><ul><li>分隔链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy1 = ListNode()<br>        dummy2 = ListNode()<br>        p1, p2 = dummy1, dummy2<br><br>        <span class="hljs-keyword">while</span> head:<br>            <span class="hljs-keyword">if</span> head.val &lt; x:<br>                p1.<span class="hljs-built_in">next</span> = head<br>                p1 = p1.<span class="hljs-built_in">next</span><br>                <br>            <span class="hljs-keyword">else</span>:<br>                p2.<span class="hljs-built_in">next</span> = head<br>                p2 = p2.<span class="hljs-built_in">next</span><br>            tmp = head.<span class="hljs-built_in">next</span><br>            head.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>            head = tmp<br>            <br>        p1.<span class="hljs-built_in">next</span> = dummy2.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> dummy1.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><blockquote><p>通过建立两个链表虚拟节点实现</p></blockquote><ul><li>合并k个有序链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> heapq<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeKLists</span>(<span class="hljs-params">self, lists: <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[ListNode]]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy = ListNode()<br>        p = dummy<br><br>        head = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lists)):<br>            <span class="hljs-keyword">if</span> lists[i]:<br>                heapq.heappush(head, (lists[i].val, i))<br>                lists[i] = lists[i].<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">while</span> head:<br>            val, idx = heapq.heappop(head)<br>            p.<span class="hljs-built_in">next</span> = ListNode(val)<br>            p = p.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> lists[idx]:<br>                heapq.heappush(head, (lists[idx].val, idx))<br>                lists[idx] = lists[idx].<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><blockquote><p>使用优先队列（小根堆）对所有列表的第一个数字进行排序</p><p>tips：还有一种方法，是分治法，不断两两合并然后得到最后的结果。</p></blockquote><ul><li>单链表的倒数第k个节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getKthFromEnd</span>(<span class="hljs-params">self, head: ListNode, k: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        fast = head<br>        slow = head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            fast = fast.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-keyword">while</span> fast:<br>            fast = fast.<span class="hljs-built_in">next</span><br>            slow = slow.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> slow<br></code></pre></td></tr></table></figure><blockquote><p>使用双指针标记尾部位置，实现一遍遍历。</p></blockquote><ul><li>删除链表倒数第N个节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNthFromEnd</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy = ListNode(val=-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>=head)<br>        fast, slow = dummy, dummy<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            fast = fast.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-keyword">while</span> fast.<span class="hljs-built_in">next</span>:<br>            fast = fast.<span class="hljs-built_in">next</span><br>            slow = slow.<span class="hljs-built_in">next</span><br>        slow.<span class="hljs-built_in">next</span> = slow.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><blockquote><p>同样是使用双指针的方法，但是使用虚拟节点避免空值情况</p></blockquote><ul><li>链表的中间节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">middleNode</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        fast, slow = head, head<br><br>        <span class="hljs-keyword">while</span> fast <span class="hljs-keyword">and</span> fast.<span class="hljs-built_in">next</span>:<br>            slow = slow.<span class="hljs-built_in">next</span><br>            fast = fast.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> slow<br></code></pre></td></tr></table></figure><blockquote><p>双指针实现，快慢指针速度分别为1和2</p></blockquote><ul><li>判断链表是否包含环</li></ul><blockquote><p>快慢指针，若快指针到达None，则无环；若快慢指针相遇，则有环。</p></blockquote><ul><li>相交链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getIntersectionNode</span>(<span class="hljs-params">self, headA: ListNode, headB: ListNode</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">if</span> headA == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> headB == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        p1, p2 = headA, headB<br><br>        <span class="hljs-keyword">while</span> p1 != p2: <span class="hljs-comment"># 如果没有相交，两个节点最终也都回到None</span><br>            <span class="hljs-keyword">if</span> p1 != <span class="hljs-literal">None</span>:<br>                p1 = p1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                p1 = headB<br>            <br>            <span class="hljs-keyword">if</span> p2 != <span class="hljs-literal">None</span>:<br>                p2 = p2.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                p2 = headA<br>        <span class="hljs-keyword">return</span> p1<br></code></pre></td></tr></table></figure><blockquote><p>若相交，链表A： a+c, 链表B : b+c. a+c+b+c &#x3D; b+c+a+c 。则会在公共处c起点相遇。若不相交，a +b &#x3D; b+a 。因此相遇处是NULL</p><p>还有一种方法，就是分别获取两个链表的长度，，让长的链表先走长度差的步数后使得二者长度相同，接着再进行遍历。</p></blockquote><h3 id="递归魔法：反转单链表"><a href="#递归魔法：反转单链表" class="headerlink" title="递归魔法：反转单链表"></a>递归魔法：反转单链表</h3><ul><li>递归反转整个链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">if</span> head == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        <br>        last = self.reverseList(head.<span class="hljs-built_in">next</span>)<br>        head.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = head<br>        head.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> last<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/xUkxxK"><img src="https://s1.ax1x.com/2022/10/12/xUkxxK.png" alt="xUkxxK.png"></a></p><blockquote><p>使用递归的方法时，需要搞清楚递归函数内具体做了什么，像这道题搞清楚递归函数的作用就很重要。</p><p>tips：还有一种方法是逐个反转指针。**rev, rev.next, p &#x3D; p, rev, p.next **</p></blockquote><ul><li>k个一组反转链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseKGroup</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        p = head<br>        l = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> p:<br>            p = p.<span class="hljs-built_in">next</span><br>            l += <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> l &lt; k:<br>            <span class="hljs-keyword">return</span> head<br>        <span class="hljs-keyword">else</span>:<br>            tmp = head<br>            p, rev = head, <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>                rev, rev.<span class="hljs-built_in">next</span>, p = p, rev, p.<span class="hljs-built_in">next</span><br>            tmp.<span class="hljs-built_in">next</span> = self.reverseKGroup(p, k)<br>            <span class="hljs-keyword">return</span> rev<br></code></pre></td></tr></table></figure><blockquote><p>以链表长度作为跳出递归的条件。</p></blockquote><ul><li>回文链表</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.left=<span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self,right</span>):<br>        <span class="hljs-keyword">if</span> right==<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>          <br>        res=self.traverse(right.<span class="hljs-built_in">next</span>)<br>        res=res <span class="hljs-keyword">and</span> (right.val==self.left.val)<br>        self.left=self.left.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        self.left=head<br>        <span class="hljs-keyword">return</span> self.traverse(head)<br></code></pre></td></tr></table></figure><blockquote><p>递归法：利用后序遍历实现链表的反向遍历</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment"># 找中点</span><br>        slow, fast = head, head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-keyword">and</span> fast.<span class="hljs-built_in">next</span>:<br>            slow = slow.<span class="hljs-built_in">next</span><br>            fast = fast.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># if fast == None: # 偶数长度时</span><br>        <span class="hljs-comment">#     slow = slow.next</span><br>        <br>        <span class="hljs-comment"># 反转链表</span><br>        p, rev = slow, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> p:<br>            rev, rev.<span class="hljs-built_in">next</span>, p = p,  rev, p.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-comment"># 比较</span><br>        <span class="hljs-keyword">while</span> rev:<br>            <span class="hljs-keyword">if</span> rev.val != head.val:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            rev = rev.<span class="hljs-built_in">next</span><br>            head = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><blockquote><p>找中点+反转链表+比较</p></blockquote><h3 id="其他链表练习"><a href="#其他链表练习" class="headerlink" title="其他链表练习"></a>其他链表练习</h3><ul><li>链表中的下一个更大节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nextLargerNodes</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        stack = [-<span class="hljs-number">1</span>]<br><br>        p, rev = head, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> p:<br>            rev, rev.<span class="hljs-built_in">next</span>, p = p, rev, p.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-keyword">while</span> rev:<br>            <span class="hljs-keyword">if</span> rev.val &gt;= stack[<span class="hljs-number">0</span>]:<br>                res.append(<span class="hljs-number">0</span>)<br>                stack = [rev.val]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">while</span> stack[-<span class="hljs-number">1</span>] &lt;= rev.val:<br>                    stack.pop()<br><br>                res.append(stack[-<span class="hljs-number">1</span>])<br>                stack.append(rev.val)<br>            rev = rev.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><blockquote><p>反转后使用单调栈</p></blockquote><ul><li>删除排序链表中的重复元素2</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteDuplicates</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy = ListNode(-<span class="hljs-number">1</span>, head)<br>        pre, lat = dummy, dummy.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> lat <span class="hljs-keyword">and</span> lat.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">if</span> lat.val == lat.<span class="hljs-built_in">next</span>.val:<br>                <span class="hljs-keyword">while</span> lat.<span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> lat.val == lat.<span class="hljs-built_in">next</span>.val:<br>                    lat = lat.<span class="hljs-built_in">next</span><br>                pre.<span class="hljs-built_in">next</span> = lat.<span class="hljs-built_in">next</span><br>                lat = pre.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                pre = pre.<span class="hljs-built_in">next</span><br>                lat = lat.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><blockquote><p>双指针，每次跳过一整段的相同元素。</p></blockquote><ul><li>链表随机节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>):<br>        self.head = head<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        node, i, ans = self.head, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> node:<br>            <span class="hljs-keyword">if</span> randrange(i) == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 1/i 的概率选中（替换为答案）</span><br>                ans = node.val<br>            i += <span class="hljs-number">1</span><br>            node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><blockquote><p>水塘抽样法：从链表头开始，遍历整个链表，对遍历到的第 ii 个节点，随机选择区间 [0,i)[0,i) 内的一个整数，如果其等于 00，则将答案置为该节点值，否则答案不变。</p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="1、双指针"><a href="#1、双指针" class="headerlink" title="1、双指针"></a>1、双指针</h3><ul><li>删除有序数组中的重复项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        l = <span class="hljs-built_in">len</span>(nums)<br>        pre = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l):<br>            <span class="hljs-keyword">if</span> nums[i] == nums[pre]:<br>                l -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                pre += <span class="hljs-number">1</span><br>                nums[pre] = nums[i]<br>        <span class="hljs-keyword">return</span> l<br></code></pre></td></tr></table></figure><blockquote><p>快指针遍历数组，慢指针标记删除后的结果。</p><p>相似题目：移除元素，移动零</p></blockquote><ul><li>左右指针（二分查找）</li><li>两数之和2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> numbers[left] + numbers[right] == target:<br>                <span class="hljs-keyword">return</span> [left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">elif</span> numbers[left] + numbers[right] &gt; target:<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left +=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>数组有序，则通过左右指针调整两数之和的大小</p></blockquote><ul><li>反转数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">self, s: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify s in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            s[left], s[right] = s[right], s[left]<br>            left += <span class="hljs-number">1</span><br>            right -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>最大回文子串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isp</span>(<span class="hljs-params">self, s, l, r</span>):<br>        <span class="hljs-keyword">while</span> l &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> r &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[l] == s[r]:<br>            l -= <span class="hljs-number">1</span><br>            r += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> s[l+<span class="hljs-number">1</span>:r]     <span class="hljs-comment"># 不取两边</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        res = s[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            res1 = self.isp(s, i, i)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res1)&gt;<span class="hljs-built_in">len</span>(res):<br>                res = res1<br>            <br>            res2 = self.isp(s, i, i+<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res2)&gt;<span class="hljs-built_in">len</span>(res):<br>                res = res2<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><blockquote><p>从中间向外扩展的双指针。</p><p>tips：另有动态规划法    和    O(n)的manacher法，后序刷到那部分了再看。</p></blockquote><h3 id="2、前缀和"><a href="#2、前缀和" class="headerlink" title="2、前缀和"></a>2、前缀和</h3><blockquote><p><strong>前缀和主要适用的场景是原始数组不会被修改的情况下，频繁查询某个区间的累加和</strong>。</p></blockquote><ul><li>区域和检索 - 数组不可变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>        self.nums = nums<br>        self.l = <span class="hljs-built_in">len</span>(nums)<br>        self.pref = [<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.l):<br>            self.pref.append(self.pref[i] + self.nums[i])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sumRange</span>(<span class="hljs-params">self, left: <span class="hljs-built_in">int</span>, right: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> self.pref[right+<span class="hljs-number">1</span>] - self.pref[left]<br></code></pre></td></tr></table></figure><ul><li>二维区域和检索 - 数组不可变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumMatrix</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>):<br>        self.pref = [[<span class="hljs-number">0</span>] * (<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)+<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])):<br>                self.pref[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = self.pref[i][j+<span class="hljs-number">1</span>] + self.pref[i+<span class="hljs-number">1</span>][j]-self.pref[i][j] +matrix[i][j]<br>        <span class="hljs-comment"># print(self.pref)</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sumRegion</span>(<span class="hljs-params">self, row1: <span class="hljs-built_in">int</span>, col1: <span class="hljs-built_in">int</span>, row2: <span class="hljs-built_in">int</span>, col2: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> self.pref[row2+<span class="hljs-number">1</span>][col2+<span class="hljs-number">1</span>] + self.pref[row1][col1] -self.pref[row1][col2+<span class="hljs-number">1</span>] - self.pref[row2+<span class="hljs-number">1</span>][col1]<br></code></pre></td></tr></table></figure><blockquote><p>与上相似，构建前缀数组</p></blockquote><h3 id="3、差分数组"><a href="#3、差分数组" class="headerlink" title="3、差分数组"></a>3、差分数组</h3><blockquote><p><strong>差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减</strong>。</p></blockquote><ul><li>航班预订统计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">corpFlightBookings</span>(<span class="hljs-params">self, bookings: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        diff = [<span class="hljs-number">0</span>] * n<br>        <span class="hljs-keyword">for</span> booking <span class="hljs-keyword">in</span> bookings:<br>            diff[booking[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>] += booking[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">if</span> booking[<span class="hljs-number">1</span>] &lt; n:<br>                diff[booking[<span class="hljs-number">1</span>]] -= booking[<span class="hljs-number">2</span>]<br>        ret = [<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            ret.append(ret[-<span class="hljs-number">1</span>]+diff[i])<br>        <span class="hljs-keyword">return</span> ret[<span class="hljs-number">1</span>:]<br></code></pre></td></tr></table></figure><ul><li>拼车</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">carPooling</span>(<span class="hljs-params">self, trips: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], capacity: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        diff = [<span class="hljs-number">0</span>] * <span class="hljs-number">1001</span><br>        <span class="hljs-keyword">for</span> trip <span class="hljs-keyword">in</span> trips:<br>            diff[trip[<span class="hljs-number">1</span>]] += trip[<span class="hljs-number">0</span>]<br>            diff[trip[<span class="hljs-number">2</span>]] -= trip[<span class="hljs-number">0</span>]<br><br>        cur = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(diff)):<br>            cur += diff[i]<br>            <span class="hljs-keyword">if</span> cur &gt; capacity:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><blockquote><p>差分数组的小变体，同一站上下车对总容量没有影响。</p></blockquote><h3 id="4、二维数组的花式遍历"><a href="#4、二维数组的花式遍历" class="headerlink" title="4、二维数组的花式遍历"></a>4、二维数组的花式遍历</h3><ul><li>反转字符串中的单词</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>  <span class="hljs-comment">#1.去除多余的空格</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_spaces</span>(<span class="hljs-params">self,s</span>):     <br>            n=<span class="hljs-built_in">len</span>(s)<br>            left=<span class="hljs-number">0</span><br>            right=n-<span class="hljs-number">1</span><br>        <br>            <span class="hljs-keyword">while</span> left&lt;=right <span class="hljs-keyword">and</span> s[left]==<span class="hljs-string">&#x27; &#x27;</span>:       <span class="hljs-comment">#去除开头的空格</span><br>                left+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> left&lt;=right <span class="hljs-keyword">and</span> s[right]==<span class="hljs-string">&#x27; &#x27;</span>:        <span class="hljs-comment">#去除结尾的空格</span><br>                right=right-<span class="hljs-number">1</span><br>            tmp=[]<br>            <span class="hljs-keyword">while</span> left&lt;=right:                                 <span class="hljs-comment">#去除单词中间多余的空格</span><br>                <span class="hljs-keyword">if</span> s[left]!=<span class="hljs-string">&#x27; &#x27;</span>:<br>                    tmp.append(s[left])<br>                <span class="hljs-keyword">elif</span> tmp[-<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27; &#x27;</span>:   <span class="hljs-comment">#当前位置是空格，但是相邻的上一个位置不是空格，则该空格是合理的</span><br>                    tmp.append(s[left])<br>                left+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> tmp<br><span class="hljs-comment">#2.翻转字符数组</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_string</span>(<span class="hljs-params">self,nums,left,right</span>):<br>            <span class="hljs-keyword">while</span> left&lt;right:<br>                nums[left], nums[right]=nums[right],nums[left]<br>                left+=<span class="hljs-number">1</span><br>                right-=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-comment">#3.翻转每个单词</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_each_word</span>(<span class="hljs-params">self, nums</span>):<br>            start=<span class="hljs-number">0</span><br>            end=<span class="hljs-number">0</span><br>            n=<span class="hljs-built_in">len</span>(nums)<br>            <span class="hljs-keyword">while</span> start&lt;n:<br>                <span class="hljs-keyword">while</span> end&lt;n <span class="hljs-keyword">and</span> nums[end]!=<span class="hljs-string">&#x27; &#x27;</span>:<br>                    end+=<span class="hljs-number">1</span><br>                self.reverse_string(nums,start,end-<span class="hljs-number">1</span>)<br>                start=end+<span class="hljs-number">1</span><br>                end+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment">#4.翻转字符串里的单词</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseWords</span>(<span class="hljs-params">self, s</span>):<br>            l = self.trim_spaces(s)                     <br>            self.reverse_string( l,  <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(l) - <span class="hljs-number">1</span>)   <br>            self.reverse_each_word(l)               <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(l)                                 <br></code></pre></td></tr></table></figure><blockquote><p>先反转整个字符串，然后反转单个单词。要想不使用额外空间的话，实现比较复杂，需要一步步学习。</p><p>直接使用reverse 和split函数很简单，但与算法不想干。</p></blockquote><ul><li>顺时针旋转二维数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify matrix in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        n = <span class="hljs-built_in">len</span>(matrix)<br>        <span class="hljs-comment"># 左上到右下对角线，镜像对称</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, n):<br>                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]<br><br>        <span class="hljs-comment"># 垂线，duichen</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            matrix[i] = matrix[i][::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> matrix<br></code></pre></td></tr></table></figure><blockquote><p>将旋转问题分解为 两次对称问题。</p></blockquote><ul><li>螺旋矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">spiralOrder</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        m, n = <span class="hljs-built_in">len</span>(matrix), <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br><br>        cur_x, cur_y = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        velocity = [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]]<br>        velocity_type = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m*n):<br>            res.append(matrix[cur_x][cur_y])<br>            matrix[cur_x][cur_y] = <span class="hljs-number">101</span><br><br>            <span class="hljs-keyword">if</span> cur_x + velocity[velocity_type][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> cur_x + velocity[velocity_type][<span class="hljs-number">0</span>] &gt;= m <span class="hljs-keyword">or</span> cur_y + velocity[velocity_type][<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> cur_y + velocity[velocity_type][<span class="hljs-number">1</span>]&gt;=n <span class="hljs-keyword">or</span> matrix[cur_x + velocity[velocity_type][<span class="hljs-number">0</span>]][cur_y + velocity[velocity_type][<span class="hljs-number">1</span>]]==<span class="hljs-number">101</span>:<br>                velocity_type += <span class="hljs-number">1</span><br>                velocity_type %= <span class="hljs-number">4</span><br>            <br>            cur_x += velocity[velocity_type][<span class="hljs-number">0</span>]<br>            cur_y += velocity[velocity_type][<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><blockquote><p>迭代地使用四个方向进行遍历，当碰到边界或者已遍历过的元素后，需要更换遍历方向</p></blockquote><ul><li>螺旋矩阵2</li></ul><blockquote><p>螺旋矩阵2与螺旋矩阵具有相同的遍历方式，只是前者是填入元素，后者是读取元素。</p></blockquote><h3 id="5、滑动窗口算法框架"><a href="#5、滑动窗口算法框架" class="headerlink" title="5、滑动窗口算法框架"></a>5、滑动窗口算法框架</h3><ul><li>滑动窗口的整体框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;<br>    <span class="hljs-comment">// 增大窗口</span><br>    window.add(s[right]);<br>    right++;<br>    <br>    <span class="hljs-keyword">while</span> (window needs shrink) &#123;<br>        <span class="hljs-comment">// 缩小窗口</span><br>        window.remove(s[left]);<br>        left++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最小覆盖子串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minWindow</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        s = <span class="hljs-built_in">list</span>(s)<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        window = collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        needs = collections.Counter(t)<br>        valid = <span class="hljs-number">0</span><br>        max_len = <span class="hljs-number">100000000</span><br>        start = <span class="hljs-number">0</span><br><br>        <span class="hljs-comment"># 滑动右指针直到当前窗口满足要求</span><br>        <span class="hljs-keyword">while</span> right &lt; <span class="hljs-built_in">len</span>(s):<br>            ch_in = s[right]<br>            right += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ch_in <span class="hljs-keyword">in</span> needs.keys():<br>                window[ch_in] += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> window[ch_in] == needs[ch_in]:<br>                    valid += <span class="hljs-number">1</span><br>                    <br>            <span class="hljs-comment"># 滑动左指针直到当前窗口不满足要求</span><br>            <span class="hljs-keyword">while</span> valid == <span class="hljs-built_in">len</span>(needs):<br>                <span class="hljs-keyword">if</span> (right-left) &lt; max_len:<br>                    max_len = right - left<br>                    start = left<br><br>                ch_out = s[left]<br>                left += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> ch_out <span class="hljs-keyword">in</span> needs.keys():<br>                    <span class="hljs-keyword">if</span> needs[ch_out] == window[ch_out]:<br>                        valid -= <span class="hljs-number">1</span><br>                    window[ch_out] -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> max_len == <span class="hljs-number">100000000</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(s[start:start+max_len])<br></code></pre></td></tr></table></figure><blockquote><p>使用window记录当前窗口下的单词数量，使用needs记录目标字符串下的单词数量，用valid标记当前窗口是否能够覆盖目标子串</p></blockquote><ul><li>字符串的排列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkInclusion</span>(<span class="hljs-params">self, s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        needs = collections.Counter(s1)<br>        windows = collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        valid = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">while</span> right &lt; <span class="hljs-built_in">len</span>(s2):<br>            ch  = s2[right]<br>            right += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">in</span> needs.keys():<br>                windows[ch] += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> windows[ch] == needs[ch]:<br>                    valid += <span class="hljs-number">1</span><br>            <br><br>            <span class="hljs-keyword">while</span> valid == <span class="hljs-built_in">len</span>(needs):<br>                <span class="hljs-keyword">if</span> right - left == <span class="hljs-built_in">len</span>(s1):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                ch = s2[left]<br>                left += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">in</span> needs.keys():<br>                    <span class="hljs-keyword">if</span> windows[ch] == needs[ch]:<br>                        valid -= <span class="hljs-number">1</span><br>                    windows[ch] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><blockquote><p>和上题一样，只是如果最短覆盖子串的长度等于子串长度时，返回True，否则返回False。</p></blockquote><ul><li>找到字符串中所有字母异位词</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findAnagrams</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        needs, window = collections.Counter(p), collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        ret = []<br>        valid = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">while</span> right &lt; <span class="hljs-built_in">len</span>(s):<br>            ch = s[right]<br>            right += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">in</span> needs.keys():<br>                window[ch] += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> window[ch] == needs[ch]:<br>                    valid += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">while</span> valid == <span class="hljs-built_in">len</span>(needs):<br>                <span class="hljs-keyword">if</span> right - left == <span class="hljs-built_in">len</span>(p):<br>                    ret.append(left)<br>            <br>                ch = s[left]<br>                left += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">in</span> needs.keys():<br>                    <span class="hljs-keyword">if</span> window[ch] == needs[ch]:<br>                        valid -= <span class="hljs-number">1</span><br>                    window[ch] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><blockquote><p>基本完全一样的代码，只是返回值不一样而已。</p></blockquote><ul><li>无重复字符的最长子串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        window = collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        valid = <span class="hljs-number">1</span><br>        max_len = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">while</span> right &lt; <span class="hljs-built_in">len</span>(s):<br>            ch = s[right]<br>            right += <span class="hljs-number">1</span><br>            window[ch] += <span class="hljs-number">1</span><br>            <br><span class="hljs-comment"># 判断是否进行窗口的收缩</span><br>            <span class="hljs-keyword">while</span> window[ch] &gt; <span class="hljs-number">1</span>:<br>                ch_out = s[left]<br>                left += <span class="hljs-number">1</span><br>                window[ch_out] -= <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 收缩完成后的窗口才符合题意，故在这里进行更新</span><br>            max_len = <span class="hljs-built_in">max</span>(max_len, right - left)<br>        <span class="hljs-keyword">return</span> max_len<br></code></pre></td></tr></table></figure><ul><li>串联所有单词的子串</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findstart</span>(<span class="hljs-params">self, s, words</span>):<br>        word_len = <span class="hljs-built_in">len</span>(words[<span class="hljs-number">0</span>])<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        needs, window = collections.Counter(words), collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        valid = <span class="hljs-number">0</span><br>        ret = []<br><br>        <span class="hljs-keyword">while</span> right &lt; <span class="hljs-built_in">len</span>(s):<br>            w = <span class="hljs-string">&#x27;&#x27;</span>.join(s[right:right+word_len])<br>            right += word_len<br>            <span class="hljs-keyword">if</span> w <span class="hljs-keyword">in</span> words:<br>                window[w] += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> window[w] == needs[w]:<br>                    valid += <span class="hljs-number">1</span><br>            <br>            <span class="hljs-keyword">while</span> valid == <span class="hljs-built_in">len</span>(needs):<br>                <span class="hljs-keyword">if</span> (right - left) == word_len * <span class="hljs-built_in">len</span>(words):<br>                    ret.append(left)<br>                w = <span class="hljs-string">&#x27;&#x27;</span>.join(s[left:left+word_len])<br>                left += word_len<br><br>                <span class="hljs-keyword">if</span> w <span class="hljs-keyword">in</span> words:<br>                    <span class="hljs-keyword">if</span> window[w] == needs[w]:<br>                        valid -= <span class="hljs-number">1</span><br>                    window[w] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ret<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, words: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        s = <span class="hljs-built_in">list</span>(s)<br>        ret = []<br>        <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(words[<span class="hljs-number">0</span>])):    <span class="hljs-comment"># 从不同的起点开始，进行窗口的滑动。       </span><br>            res = self.findstart(s[start:], words)<br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>                ret.append(start + r)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><blockquote><p>在<strong>找到字符串中所有字母异位词</strong>这道题的基础上，将字符换成了单词。</p><p>本解法在基于字符的方法上做出了两点改动：1、左右滑动指针每次取字符的操作变为每次取单词，且每次前进word_len步；2、由于指针每次前进word_len步，导致返回的结果必为word_len的整数倍，因此需要从不同的起点出发来遍历完整的可能起点。</p></blockquote><h3 id="6、RABIN-KARP-字符匹配算法"><a href="#6、RABIN-KARP-字符匹配算法" class="headerlink" title="6、RABIN KARP 字符匹配算法"></a>6、RABIN KARP 字符匹配算法</h3><ul><li>RABIN KARP 字符匹配算法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Rabin-Karp 指纹字符串查找算法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rabinKarp</span><span class="hljs-params">(String txt, String pat)</span> &#123;<br>    <span class="hljs-comment">// 位数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">L</span> <span class="hljs-operator">=</span> pat.length();<br>    <span class="hljs-comment">// 进制（只考虑 ASCII 编码）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">R</span> <span class="hljs-operator">=</span> <span class="hljs-number">256</span>;<br>    <span class="hljs-comment">// 取一个比较大的素数作为求模的除数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">Q</span> <span class="hljs-operator">=</span> <span class="hljs-number">1658598167</span>;<br>    <span class="hljs-comment">// R^(L - 1) 的结果</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">RL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= L - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// 计算过程中不断求模，避免溢出</span><br>        RL = (RL * R) % Q;<br>    &#125;<br>    <span class="hljs-comment">// 计算模式串的哈希值，时间 O(L)</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">patHash</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pat.length(); i++) &#123;<br>        patHash = (R * patHash + pat.charAt(i)) % Q;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 滑动窗口中子字符串的哈希值</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">windowHash</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 滑动窗口代码框架，时间 O(N)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; txt.length()) &#123;<br>        <span class="hljs-comment">// 扩大窗口，移入字符</span><br>        windowHash = ((R * windowHash) % Q + txt.charAt(right)) % Q;<br>        right++;<br><br>        <span class="hljs-comment">// 当子串的长度达到要求</span><br>        <span class="hljs-keyword">if</span> (right - left == L) &#123;<br>            <span class="hljs-comment">// 根据哈希值判断是否匹配模式串</span><br>            <span class="hljs-keyword">if</span> (windowHash == patHash) &#123;<br>                <span class="hljs-comment">// 当前窗口中的子串哈希值等于模式串的哈希值</span><br>                <span class="hljs-comment">// 还需进一步确认窗口子串是否真的和模式串相同，避免哈希冲突</span><br>                <span class="hljs-keyword">if</span> (pat.equals(txt.substring(left, right))) &#123;<br>                    <span class="hljs-keyword">return</span> left;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 缩小窗口，移出字符</span><br>            windowHash = (windowHash - (txt.charAt(left) * RL) % Q + Q) % Q;<br>            <span class="hljs-comment">// X % Q == (X + Q) % Q 是一个模运算法则</span><br>            <span class="hljs-comment">// 因为 windowHash - (txt[left] * RL) % Q 可能是负数</span><br>            <span class="hljs-comment">// 所以额外再加一个 Q，保证 windowHash 不会是负数</span><br><br>            left++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 没有找到模式串</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>一个256进制的整数容易 溢出，一个可行的解决方法是求余。但是求余会出现哈希冲突的情况，此时需要用暴力的方法去匹配。</p></blockquote><ul><li>重复的DNA序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findRepeatedDnaSequences</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        s = <span class="hljs-built_in">list</span>(s)<br>        seen = collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        mapper = &#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;C&#x27;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;G&#x27;</span>:<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-number">4</span>&#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) &lt; <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">return</span> []<br>        ret = []<br><br>        cur_num = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            cur_num = cur_num * <span class="hljs-number">5</span> + mapper[s[i]]<br>        seen[cur_num] += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-built_in">len</span>(s)):<br>            cur_num = cur_num - mapper[s[i-<span class="hljs-number">10</span>]] * <span class="hljs-number">5</span>**<span class="hljs-number">9</span><br>            cur_num = cur_num * <span class="hljs-number">5</span> + mapper[s[i]]<br><br>            seen[cur_num] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> seen[cur_num] &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&#x27;</span>.join(s[i-<span class="hljs-number">9</span>:i+<span class="hljs-number">1</span>]) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ret:<br>                ret.append(<span class="hljs-string">&#x27;&#x27;</span>.join(s[i-<span class="hljs-number">9</span>:i+<span class="hljs-number">1</span>]))<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><blockquote><p>常规的做法是，将长度为10的子串作为字典的key来存储，但是会使用较大的空间。这里将该子串替换为一一对应的数字(使用五进制)，能够缓解这一问题。</p></blockquote><h3 id="7、二分搜索算法"><a href="#7、二分搜索算法" class="headerlink" title="7、二分搜索算法"></a>7、二分搜索算法</h3><ul><li>二分查找的主要框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = ...;<br><br>    <span class="hljs-keyword">while</span>(...) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ...;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>左闭右闭的二分查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = left + (right - left) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>还有左闭右开的版本，我觉得记住用熟练一个就够了。</p></blockquote><ul><li>左闭右闭的二分查找，找有序列表的左右边界</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchRange</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> nums==[]: <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]<br>        ret = []<br><br>        <span class="hljs-comment"># 寻找左边界</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left+right)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid - <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> left == <span class="hljs-built_in">len</span>(nums):<br>            ret.append(-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> nums[left] == target:<br>            ret.append(left)<br>        <span class="hljs-keyword">else</span>:<br>            ret.append(-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># 寻找右边界</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left+right)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid - <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> left - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span>:<br>            ret.append(-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> nums[left-<span class="hljs-number">1</span>] == target:<br>            ret.append(left-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            ret.append(-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> ret<br>        <br></code></pre></td></tr></table></figure><h3 id="8、带权重的随机选择算法"><a href="#8、带权重的随机选择算法" class="headerlink" title="8、带权重的随机选择算法"></a>8、带权重的随机选择算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, w: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>        self.total_weight = <span class="hljs-built_in">sum</span>(w)<br>        self.pre = [<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> w:<br>            self.pre.append(self.pre[-<span class="hljs-number">1</span>]+i)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickIndex</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        seed = random.randint(<span class="hljs-number">1</span>, self.total_weight)<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(self.pre) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left+right)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> self.pre[mid] == seed:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> self.pre[mid] &lt; seed:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> self.pre[mid] &gt; seed:<br>                right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>利用前缀和和二分搜索达到加权的目的。</p></blockquote><h3 id="9、二分查找-2"><a href="#9、二分查找-2" class="headerlink" title="9、二分查找-2"></a>9、二分查找-2</h3><ul><li>在D天内送达包裹的能力</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">needdays</span>(<span class="hljs-params">sekf, weights, capacity</span>):<br>        cur = <span class="hljs-number">0</span><br>        days = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, weight <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(weights):<br>            <span class="hljs-keyword">if</span> cur + weight &lt;= capacity:<br>                cur += weight<br>            <span class="hljs-keyword">else</span>:<br>                cur = weight<br>                days += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> days + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shipWithinDays</span>(<span class="hljs-params">self, weights: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], days: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left, right = <span class="hljs-built_in">max</span>(weights), <span class="hljs-built_in">sum</span>(weights)<br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> self.needdays(weights, mid) == days:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> self.needdays(weights, mid) &lt; days:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> self.needdays(weights, mid) &gt; days:<br>                left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left<br><br></code></pre></td></tr></table></figure><blockquote><p>使用二分搜索遍历查找所有可能的容量，以其左边界为返回值。</p></blockquote><ul><li>分割数组的最大值</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">needdays</span>(<span class="hljs-params">self, nums, cap</span>):<br>        ret = <span class="hljs-number">0</span><br>        cur = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> cur + nums[i] &gt; cap:<br>                ret += <span class="hljs-number">1</span><br>                cur = nums[i]<br>            <span class="hljs-keyword">else</span>:<br>                cur += nums[i]<br>        <span class="hljs-keyword">return</span> ret + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">splitArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left, right = <span class="hljs-built_in">max</span>(nums), <span class="hljs-built_in">sum</span>(nums)<br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> self.needdays(nums, mid) == k:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> self.needdays(nums, mid) &lt; k:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure><blockquote><p>跟**在D天内送达包裹的能力 **完全一样，只是换了个说法，稍微转换一下就可以。</p></blockquote><ul><li>爱吃香蕉的珂珂</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self, piles, speed</span>):<br>        ret = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(piles)):<br>            ret += math.ceil(piles[i] / speed)<br>        <span class="hljs-keyword">return</span> ret<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minEatingSpeed</span>(<span class="hljs-params">self, piles: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], h: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(piles) == h: <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(piles)<br>        left, right = <span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>(piles)<br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> self.eat(piles, mid) == h:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> self.eat(piles, mid) &lt; h:<br>                right = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure><blockquote><p>与上面两题的方法类似，只是计算所需要额承载能力上，因为题意的变化而有细微的改变。</p></blockquote><h3 id="10、田忌赛马"><a href="#10、田忌赛马" class="headerlink" title="10、田忌赛马"></a>10、田忌赛马</h3><ul><li>优势洗牌</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">advantageCount</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(nums1)<br>        idx1, idx2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n)), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))<br>        idx1.sort(key=<span class="hljs-keyword">lambda</span> x: nums1[x])<br>        idx2.sort(key=<span class="hljs-keyword">lambda</span> x: nums2[x])<br><br>        ans = [<span class="hljs-number">0</span>] * n<br>        left, right = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> nums1[idx1[i]] &gt; nums2[idx2[left]]:<br>                ans[idx2[left]] = nums1[idx1[i]]<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                ans[idx2[right]] = nums1[idx1[i]]<br>                right -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><blockquote><p>如果我最小的数比他最小的数大，那就用这个最小的数来比，否则就用我最小的数来消耗他最大的数。</p></blockquote><h3 id="11、常数时间删除"><a href="#11、常数时间删除" class="headerlink" title="11、常数时间删除"></a>11、常数时间删除</h3><ul><li>O(1)时间插入，删除和随机获取元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomizedSet</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.nums = []<br>        self.l = <span class="hljs-number">0</span><br>        self.<span class="hljs-built_in">hash</span> = &#123;&#125;<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> val <span class="hljs-keyword">in</span> self.nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            self.l += <span class="hljs-number">1</span><br>            self.nums.append(val)<br>            self.<span class="hljs-built_in">hash</span>[val] = self.l - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> val <span class="hljs-keyword">in</span> self.nums:<br>            idx = self.<span class="hljs-built_in">hash</span>[val]<br>            self.<span class="hljs-built_in">hash</span>[val] = self.l - <span class="hljs-number">1</span><br>            self.<span class="hljs-built_in">hash</span>[self.nums[-<span class="hljs-number">1</span>]] = idx<br>            self.nums[idx], self.nums[-<span class="hljs-number">1</span>] = self.nums[-<span class="hljs-number">1</span>], self.nums[idx]<br>            self.l -= <span class="hljs-number">1</span><br>            self.nums.pop()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        random_idx = random.randint(<span class="hljs-number">0</span>, self.l-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> self.nums[random_idx]<br></code></pre></td></tr></table></figure><blockquote><p>使用hash映射记录每个值对应的位置，这样就不需要额外去查找每个数字的索引了，是一种空间换时间的方法。</p></blockquote><ul><li>黑名单中的随机数</li></ul><blockquote><p>这道题我实在没咋理解。。。。。</p></blockquote><h3 id="12、一道数组去重的算法题把我整不会了"><a href="#12、一道数组去重的算法题把我整不会了" class="headerlink" title="12、一道数组去重的算法题把我整不会了"></a>12、一道数组去重的算法题把我整不会了</h3><ul><li>去除重复字母</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicateLetters</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        stack = []<br>        remain_counter = collections.Counter(s)<br><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stack:<br>                <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> c &lt; stack[-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span>  remain_counter[stack[-<span class="hljs-number">1</span>]] &gt; <span class="hljs-number">0</span>:<br>                    stack.pop()<br>                stack.append(c)<br>            remain_counter[c] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(stack)<br></code></pre></td></tr></table></figure><blockquote><p>这道题自己做没做出来。</p><p>主要思路是，遍历字符串，如果当前字符的字典序比前面字符小，且前面字符可去除（后面还有相同的字符出现），则去除前面字符并加入当前字符。</p></blockquote><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="1、二叉树纲领篇"><a href="#1、二叉树纲领篇" class="headerlink" title="1、二叉树纲领篇"></a>1、二叉树纲领篇</h3><p>​解题思维：<strong>是否可以通过遍历一遍二叉树得到答案？如果不能的话，是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案? 如果需要设计到子树信息, 建议使用后续遍历.</strong></p><ul><li>反向打印一个链表，可以通过后序遍历来实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 递归遍历单链表，倒序打印链表元素 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    traverse(head.next);<br>    <span class="hljs-comment">// 后序位置</span><br>    print(head.val);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>二叉树的所有问题，就是让你在前中后序位置注入巧妙的代码逻辑，去达到自己的目的，你只需要单独思考每一个节点应该做什么，其他的不用你管，抛给二叉树遍历框架，递归会在所有节点上做相同的操作</strong>。</p></blockquote><ul><li>二叉树的最大深度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.res, self.depth = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDepth</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <br>        self.depth += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right == <span class="hljs-literal">None</span>:<br>            self.res = <span class="hljs-built_in">max</span>(self.res, self.depth)<br>        self.maxDepth(root.left)<br>        self.maxDepth(root.right)<br>        self.depth -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self.res<br></code></pre></td></tr></table></figure><blockquote><p>遍历树中的所有节点，并对每个叶子结点求最大深度</p><p>前序位置是进入一个节点的时候，后序位置是离开一个节点的时候</p></blockquote><ul><li><strong>一旦你发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</li><li>二叉树的直径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.ret = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">depth</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <br>        left = self.depth(root.left)<br>        right = self.depth(root.right)<br>        self.ret = <span class="hljs-built_in">max</span>(self.ret, left + right)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left,right) + <span class="hljs-number">1</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">diameterOfBinaryTree</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        self.depth(root)<br>        <span class="hljs-keyword">return</span> self.ret<br></code></pre></td></tr></table></figure><blockquote><p>直径就是左右子树深度之和</p></blockquote><ul><li>二叉树中的最大路径和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.ret = -<span class="hljs-number">1001</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        leftmax = <span class="hljs-built_in">max</span>(self.traverse(root.left), <span class="hljs-number">0</span>)<br>        rightmax = <span class="hljs-built_in">max</span>(self.traverse(root.right), <span class="hljs-number">0</span>)<br>        self.ret = <span class="hljs-built_in">max</span>(self.ret, leftmax+rightmax+root.val)<br>        <span class="hljs-keyword">return</span> root.val + <span class="hljs-built_in">max</span>(leftmax, rightmax)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxPathSum</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> root.val<br>        self.traverse(root)<br>        <span class="hljs-keyword">return</span> self.ret<br></code></pre></td></tr></table></figure><blockquote><p>每个节点维护的值为，包含当前节点的最大路径和</p></blockquote><ul><li>二叉树层序遍历框架</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> []<br>        ret = []<br>        queue = [root]<br><br>        <span class="hljs-keyword">while</span> queue:<br>            cur_len = <span class="hljs-built_in">len</span>(queue)<br>            cur_ret = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur_len):<br>                cur_node = queue.pop(<span class="hljs-number">0</span>)<br>                cur_ret.append(cur_node.val)<br>                <span class="hljs-keyword">if</span> cur_node.left:<br>                    queue.append(cur_node.left)<br>                <span class="hljs-keyword">if</span> cur_node.right:<br>                    queue.append(cur_node.right)<br>            ret.append(cur_ret)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><blockquote><p>核心思想就是，将每一层的节点按顺序放在队列中，并按层的顺序遍历</p></blockquote><ul><li>在每一行树中找到最大值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">largestValues</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> []<br><br>        queue = [root]<br>        ret = []<br>        <span class="hljs-keyword">while</span> queue:<br>            cur_len = <span class="hljs-built_in">len</span>(queue)<br>            cur_max = -<span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">2</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur_len):<br>                cur_node = queue.pop(<span class="hljs-number">0</span>)<br>                cur_max = <span class="hljs-built_in">max</span>(cur_max, cur_node.val)<br>                <span class="hljs-keyword">if</span> cur_node.left:<br>                    queue.append(cur_node.left)<br>                <span class="hljs-keyword">if</span> cur_node.right:<br>                    queue.append(cur_node.right)<br>            ret.append(cur_max)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><blockquote><p>就是简单的二叉树层序遍历的应用。</p></blockquote><ul><li>二叉树的迭代遍历也非常重要</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> []<br><br>        ret = []<br>        stack = []<br>        node = root<br>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">or</span> node:<br>            <span class="hljs-keyword">while</span> node:<br>                stack.append(node)<br>                ret.append(node.val)<br>                node = node.left<br>            node = stack.pop()<br>            node = node.right<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><blockquote><p>二叉树迭代遍历的思想主要是依靠栈来模拟遍历的顺序。</p></blockquote><h3 id="2、二叉树思路篇"><a href="#2、二叉树思路篇" class="headerlink" title="2、二叉树思路篇"></a>2、二叉树思路篇</h3><ul><li>翻转二叉树</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">invertTree</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> root<br><br>        root.left, root.right = root.right, root.left<br>        self.invertTree(root.left)<br>        self.invertTree(root.right)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><blockquote><p>可以通过遍历树和分解问题两种思路来结局</p></blockquote><ul><li>填充节点的右侧指针</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;Optional[Node]&#x27;</span>:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> root<br><br>        queue = [root]<br>        node = root<br>        <span class="hljs-keyword">while</span> queue:<br>            cur_len = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur_len):<br>                cur_node = queue.pop(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">if</span> i != cur_len - <span class="hljs-number">1</span>:<br>                    cur_node.<span class="hljs-built_in">next</span> = queue[<span class="hljs-number">0</span>]<br><br>                <span class="hljs-keyword">if</span> cur_node.left:<br>                    queue.append(cur_node.left)<br>                <span class="hljs-keyword">if</span> cur_node.right:<br>                    queue.append(cur_node.right)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><blockquote><p>看到这道题的第一反应是使用层序遍历，但需要存储上一层的节点，有O(N)空间复杂度。</p><p>如果要在常数级空间内完成的话，需要使用之前的next信息，如下。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;Optional[Node]&#x27;</span>:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> root<br><br>        line_head = root<br>        <span class="hljs-keyword">while</span> line_head.left:<br>            cur_head = line_head<br>            <span class="hljs-keyword">while</span> cur_head:<br>                cur_head.left.<span class="hljs-built_in">next</span> = cur_head.right<br>                <span class="hljs-keyword">if</span> cur_head.<span class="hljs-built_in">next</span>:<br>                    cur_head.right.<span class="hljs-built_in">next</span> = cur_head.<span class="hljs-built_in">next</span>.left<br>                cur_head = cur_head.<span class="hljs-built_in">next</span><br><br>            line_head = line_head.left<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><ul><li>二叉树展开为链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify root in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> root<br><br>        left = self.flatten(root.left)<br>        right = self.flatten(root.right)<br><br>        root.right = left<br>        root.left = <span class="hljs-literal">None</span><br>        p = root<br>        <span class="hljs-keyword">while</span> p.right:<br>            p = p.right<br>        p.right = right<br><br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><h3 id="3、二叉树构造篇"><a href="#3、二叉树构造篇" class="headerlink" title="3、二叉树构造篇"></a>3、二叉树构造篇</h3><blockquote><p><strong>二叉树的构造问题一般都是使用「分解问题」的思路：构造整棵树 &#x3D; 根节点 + 构造左子树 + 构造右子树</strong>。</p></blockquote><ul><li>最大二叉树</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">constructMaximumBinaryTree</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> nums == []: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> TreeNode(nums[<span class="hljs-number">0</span>])<br><br>        max_val = <span class="hljs-built_in">max</span>(nums)<br>        max_idx = nums.index(max_val)<br><br>        left = self.constructMaximumBinaryTree(nums[:max_idx])<br>        right = self.constructMaximumBinaryTree(nums[max_idx+<span class="hljs-number">1</span>:])<br>        <span class="hljs-keyword">return</span> TreeNode(max_val, left=left, right=right)<br></code></pre></td></tr></table></figure><blockquote><p>简单的将两部分构造进行递归</p><p>官方还有单调栈的做法：（.      之后再想吧。</p></blockquote><ul><li>从前序和中序遍历构造二叉树</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">buildTree</span>(<span class="hljs-params">self, preorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], inorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> TreeNode(preorder[<span class="hljs-number">0</span>])<br><br>        root_val = preorder[<span class="hljs-number">0</span>]<br>        in_idx = inorder.index(root_val)<br>        left = self.buildTree(preorder[<span class="hljs-number">1</span>:in_idx+<span class="hljs-number">1</span>], inorder[:in_idx])<br>        right = self.buildTree(preorder[in_idx+<span class="hljs-number">1</span>:], inorder[in_idx+<span class="hljs-number">1</span>:])<br>        <span class="hljs-keyword">return</span> TreeNode(root_val, left, right)<br></code></pre></td></tr></table></figure><ul><li>从后序和中序遍历构造二叉树</li></ul><blockquote><p>和上题一模一样。官方对这类题目有迭代解法，但是好复杂 我看不懂（懒得看）。</p></blockquote><ul><li>从前序和后序遍历构造二叉树</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">constructFromPrePost</span>(<span class="hljs-params">self, preorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], postorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> TreeNode(preorder[<span class="hljs-number">0</span>])<br><br>        root_val = preorder[<span class="hljs-number">0</span>]<br>        left_root_val = preorder[<span class="hljs-number">1</span>]<br>        left_root_idx = postorder.index(left_root_val)<br>        left = self.constructFromPrePost(preorder[<span class="hljs-number">1</span>:left_root_idx+<span class="hljs-number">2</span>], postorder[:left_root_idx+<span class="hljs-number">1</span>])<br>        right = self.constructFromPrePost(preorder[left_root_idx+<span class="hljs-number">2</span>:], postorder[left_root_idx+<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> TreeNode(root_val, left, right)<br></code></pre></td></tr></table></figure><blockquote><p>和上两题的思路一样，只是确定左右子树的方式有所不同</p></blockquote><h3 id="4、二叉树序列化"><a href="#4、二叉树序列化" class="headerlink" title="4、二叉树序列化"></a>4、二叉树序列化</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">serialize</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Encodes a tree to a single string.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :type root: TreeNode</span><br><span class="hljs-string">        :rtype: str</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        ret = []<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">root</span>):<br>            <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <br>                ret.append(<span class="hljs-string">&#x27;N&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>            ret.append(<span class="hljs-built_in">str</span>(root.val))<br>            traverse(root.left)<br>            traverse(root.right)<br>        traverse(root)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;,&#x27;</span>.join(ret)<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deserialize</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Decodes your encoded data to tree.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :type data: str</span><br><span class="hljs-string">        :rtype: TreeNode</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        vals = data.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        self.idx = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>():<br>            <span class="hljs-keyword">if</span> vals[self.idx] == <span class="hljs-string">&#x27;N&#x27;</span>:<br>                self.idx += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            root = TreeNode(<span class="hljs-built_in">int</span>(vals[self.idx]))<br>            self.idx += <span class="hljs-number">1</span><br>            root.left = traverse()<span class="hljs-comment"># 其实这一块我不是很理解</span><br>            root.right = traverse()<br>            <span class="hljs-keyword">return</span> root<br>        <span class="hljs-keyword">return</span> traverse()<br></code></pre></td></tr></table></figure><blockquote><p>将二叉树用前序的方式存储，然后再用存储的前序结果恢复二叉树。因为将空节点的结果也存储在前序结果中，因此单使用前序结果也能完整的恢复二叉树。</p></blockquote><h3 id="5、二叉树后序篇"><a href="#5、二叉树后序篇" class="headerlink" title="5、二叉树后序篇"></a>5、二叉树后序篇</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.ret = []<br>        self.pool = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;N&#x27;</span><br><br>        left_tree = self.traverse(root.left)<br>        right_tree = self.traverse(root.right)<br>        cur_tree = left_tree + <span class="hljs-string">&#x27;,&#x27;</span> + right_tree + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(root.val)<br>        <span class="hljs-comment"># 这里我换成left_tree + &#x27;,&#x27; + str(root.val) + &#x27;,&#x27; + right_tree 就不行了，是因为带空节点的中序遍历不唯一</span><br>        <br>        freq = self.pool.get(cur_tree, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> freq == <span class="hljs-number">1</span>:<br>            self.ret.append(root)<br>        self.pool[cur_tree] = freq+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cur_tree<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findDuplicateSubtrees</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[TreeNode]]:<br>        self.traverse(root)<br>        <span class="hljs-keyword">return</span> self.ret<br></code></pre></td></tr></table></figure><blockquote><p>通过一棵树的唯一标识来记录子树的出现次数，并对重复出现的子树进行记录。</p></blockquote><h3 id="6、归并排序详解和应用"><a href="#6、归并排序详解和应用" class="headerlink" title="6、归并排序详解和应用"></a>6、归并排序详解和应用</h3><ul><li><p>归并排序核心框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义：排序 nums[lo..hi]</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span> &#123;<br>    <span class="hljs-keyword">if</span> (lo == hi) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (lo + hi) / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 利用定义，排序 nums[lo..mid]</span><br>    sort(nums, lo, mid);<br>    <span class="hljs-comment">// 利用定义，排序 nums[mid+1..hi]</span><br>    sort(nums, mid + <span class="hljs-number">1</span>, hi);<br><br>    <span class="hljs-comment">/****** 后序位置 ******/</span><br>    <span class="hljs-comment">// 此时两部分子数组已经被排好序</span><br>    <span class="hljs-comment">// 合并两个有序数组，使 nums[lo..hi] 有序</span><br>    merge(nums, lo, mid, hi);<br>    <span class="hljs-comment">/*********************/</span><br>&#125;<br><br><span class="hljs-comment">// 将有序数组 nums[lo..mid] 和有序数组 nums[mid+1..hi]</span><br><span class="hljs-comment">// 合并为有序数组 nums[lo..hi]</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> hi)</span><br></code></pre></td></tr></table></figure></li><li><p>排序数组（归并排序的应用）</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">self, nums, l, r</span>):<br>        <span class="hljs-keyword">if</span> l == r:<br>            <span class="hljs-keyword">return</span><br>        mid = (l + r) // <span class="hljs-number">2</span><br>        self.merge_sort(nums, l, mid)<br>        self.merge_sort(nums, mid + <span class="hljs-number">1</span>, r)<br>        tmp = []<br>        i, j = l, mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">or</span> j &lt;= r:<br>            <span class="hljs-keyword">if</span> i &gt; mid <span class="hljs-keyword">or</span> (j &lt;= r <span class="hljs-keyword">and</span> nums[j] &lt; nums[i]):<br>                tmp.append(nums[j])<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp.append(nums[i])<br>                i += <span class="hljs-number">1</span><br>        nums[l: r + <span class="hljs-number">1</span>] = tmp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        self.merge_sort(nums, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><ul><li>计算右侧小于当前元素的个数</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">太难啦太难啦<br></code></pre></td></tr></table></figure><ul><li><p>翻转对</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reversePairs</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.ret = <span class="hljs-number">0</span><br>        self.merge_sort(nums, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> self.ret<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">self, nums, low, high</span>):<br>        <span class="hljs-keyword">if</span> low == high:<br>            <span class="hljs-keyword">return</span><br><br>        mid = (low+high)//<span class="hljs-number">2</span><br>        self.merge_sort(nums, low, mid)<br>        self.merge_sort(nums, mid+<span class="hljs-number">1</span>, high)<br><br>        <span class="hljs-comment"># 对左右两个区间进行结果的记数</span><br>        end = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(low, mid+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">while</span> end &lt;= high <span class="hljs-keyword">and</span> nums[i] &gt; <span class="hljs-number">2</span> * nums[end]:<br>                end +=<span class="hljs-number">1</span><br>            self.ret += end - (mid + <span class="hljs-number">1</span>)<br><br>        res = []<br>        i, j = low, mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">or</span> j &lt;= high:<br>            <span class="hljs-keyword">if</span> i &gt; mid <span class="hljs-keyword">or</span> (j &lt;= high <span class="hljs-keyword">and</span> nums[j] &lt; nums[i]):<br>                res.append(nums[j])<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                res.append(nums[i])<br>                i += <span class="hljs-number">1</span><br>        nums[low:high+<span class="hljs-number">1</span>] = res<br></code></pre></td></tr></table></figure><blockquote><p>在归并排序的基础上，对所需结果进行累加。</p><p>因为归并排序在merge的时候是自带左右分区的，所以要解决有左右关系的题目时比较有用。</p></blockquote></li><li><p>区间和的个数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countRangeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], lower: <span class="hljs-built_in">int</span>, upper: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.lower, self.upper = lower, upper<br>        presum = [<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            presum.append(presum[-<span class="hljs-number">1</span>]+num)<br><br>        self.ret = <span class="hljs-number">0</span><br>        self.merge_sort(presum, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(presum)-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> self.ret<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">self, nums, low, high</span>):<br>        <span class="hljs-keyword">if</span> low == high:<br>            <span class="hljs-keyword">return</span> <br><br>        mid = (low + high) // <span class="hljs-number">2</span><br>        self.merge_sort(nums, low, mid)<br>        self.merge_sort(nums, mid+<span class="hljs-number">1</span>, high)<br><br><span class="hljs-comment"># 计数符合条件的区间</span><br>        start, end = mid+<span class="hljs-number">1</span>, mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(low, mid+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">while</span> start &lt;= high <span class="hljs-keyword">and</span> nums[start] - nums[i] &lt; self.lower:<br>                start += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> end &lt;= high <span class="hljs-keyword">and</span> nums[end] - nums[i] &lt;= self.upper:<br>                end += <span class="hljs-number">1</span><br>            self.ret += (end -start)<br><br>        res = []<br>        i, j = low, mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">or</span> j &lt;= high:<br>            <span class="hljs-keyword">if</span> i &gt; mid <span class="hljs-keyword">or</span> (j &lt;= high <span class="hljs-keyword">and</span> nums[j] &lt; nums[i]):<br>                res.append(nums[j])<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                res.append(nums[i])<br>                i += <span class="hljs-number">1</span><br>        nums[low:high+<span class="hljs-number">1</span>] = res<br><br></code></pre></td></tr></table></figure><h3 id="7、二叉搜索树-特性篇"><a href="#7、二叉搜索树-特性篇" class="headerlink" title="7、二叉搜索树-特性篇"></a>7、二叉搜索树-特性篇</h3><ul><li>二叉搜索树中第k小的元素</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">kthSmallest</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.k = k<br>        self.val = -<span class="hljs-number">1</span><br>        self.traverse(root)<br><br>        <span class="hljs-keyword">return</span> self.val<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        self.traverse(root.left)<br>        <span class="hljs-keyword">if</span> self.k == <span class="hljs-number">1</span>:<br>            self.val = root.val<br>            self.k -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>: self.k -= <span class="hljs-number">1</span><br>        self.traverse(root.right)<br></code></pre></td></tr></table></figure><blockquote><p>一个优化思路是，在每个节点记录以他为根的树的节点个数，这样可以通过比较k和这个树，准确的选择子树而不是遍历整个树</p></blockquote><ul><li>把二叉搜索树转换为累加树</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        self.traverse(root.right)<br>        root.val = self.val + root.val<br>        self.val = root.val<br>        self.traverse(root.left)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertBST</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        self.val = <span class="hljs-number">0</span><br>        self.traverse(root)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><blockquote><p>想要先遍历最大的节点，然后逐渐往小的节点遍历，累加所有节点的值</p></blockquote><h3 id="8、二叉搜索树-基操篇"><a href="#8、二叉搜索树-基操篇" class="headerlink" title="8、二叉搜索树-基操篇"></a>8、二叉搜索树-基操篇</h3><ul><li>验证二叉搜索树</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValidBST</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> self.isvalid(root, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isvalid</span>(<span class="hljs-params">self, root, minn, maxx</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <br>        <span class="hljs-keyword">if</span> minn != <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.val &lt;= minn: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> maxx != <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.val &gt;= maxx: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> self.isvalid(root.left, minn, root.val) <span class="hljs-keyword">and</span> self.isvalid(root.right, root.val, maxx)<br></code></pre></td></tr></table></figure><blockquote><p>也可以用中序遍历为升序的方式遍历</p></blockquote><ul><li>二叉搜索树中的搜索</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchBST</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        self.ret = <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">root, val</span>):<br>            <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> root.val == val:<br>                self.ret = root<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">elif</span> root.val &lt; val:<br>                traverse(root.right, val)<br>            <span class="hljs-keyword">else</span>:<br>                traverse(root.left, val)<br>        traverse(root, val)<br>        <span class="hljs-keyword">return</span> self.ret<br></code></pre></td></tr></table></figure><blockquote><p>利用性质遍历即可</p></blockquote><ul><li>二叉搜索树中的插入操作</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insertIntoBST</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> TreeNode(val)<br>        p = root<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> p.val &lt; val:<br>                <span class="hljs-keyword">if</span> p.right:<br>                    p = p.right<br>                <span class="hljs-keyword">else</span>:<br>                    p.right = TreeNode(val)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> p.val &gt; val:<br>                <span class="hljs-keyword">if</span> p.left:<br>                    p = p.left<br>                <span class="hljs-keyword">else</span>:<br>                    p.left = TreeNode(val)<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><blockquote><p>找到插入的位置后直接加在叶子结点</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insertIntoBST</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> TreeNode(val)<br>        <br>        <span class="hljs-keyword">if</span> root.val &lt; val:<br>            root.right = self.insertIntoBST(root.right, val)<br>        <span class="hljs-keyword">else</span>:<br>            root.left = self.insertIntoBST(root.left, val)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><blockquote><p>也可以用递归的方法。</p></blockquote><ul><li>删除二叉搜索树中的节点</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteNode</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode], key: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <br>        <span class="hljs-keyword">if</span> root.val == key:<br>            <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> root.right<br>            <span class="hljs-keyword">if</span> root.right == <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> root.left<br><br>            tmp_right = root.right<br>            <span class="hljs-keyword">while</span> tmp_right.left:<br>                tmp_right = tmp_right.left<br>            root.right = self.deleteNode(root.right, tmp_right.val)<br>            root.val = tmp_right.val<br><br>        <span class="hljs-keyword">elif</span> root.val &lt; key:<br>            root.right = self.deleteNode(root.right, key)<br>        <span class="hljs-keyword">else</span>:<br>            root.left = self.deleteNode(root.left, key)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><blockquote><p>先找到需要删除的节点，然后分情况进行删除。</p></blockquote><h3 id="9、二叉搜索树-构造篇"><a href="#9、二叉搜索树-构造篇" class="headerlink" title="9、二叉搜索树-构造篇"></a>9、二叉搜索树-构造篇</h3><ul><li>不同的二叉搜索树</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.memory = &#123;<span class="hljs-number">0</span>:<span class="hljs-number">1</span>, <span class="hljs-number">1</span>:<span class="hljs-number">1</span>, <span class="hljs-number">2</span>:<span class="hljs-number">2</span>, <span class="hljs-number">3</span>:<span class="hljs-number">5</span>&#125;<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numTrees</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> self.memory.keys():<br>            <span class="hljs-keyword">return</span> self.memory[n]<br>        <span class="hljs-keyword">else</span>:<br>            res = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                res += self.numTrees(i) * self.numTrees(n - i -<span class="hljs-number">1</span>)<br>            self.memory[n] = res<br>            <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><blockquote><p>就是找规律，递归或者类似于动态规划啥的。加了个记忆，用空间换时间。</p></blockquote><ul><li>不同的二叉搜索树2</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generateTree</span>(<span class="hljs-params">self, start, end</span>):<br>        <span class="hljs-keyword">if</span> start == end: <span class="hljs-keyword">return</span> [TreeNode(start)]<br>        <span class="hljs-keyword">if</span> start &gt; end: <span class="hljs-keyword">return</span> [<span class="hljs-literal">None</span>]<br><br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end+<span class="hljs-number">1</span>):<br>            tree1 = self.generateTree(start, i-<span class="hljs-number">1</span>)<br>            tree2 = self.generateTree(i+<span class="hljs-number">1</span>, end)<br><br>            <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> tree1:<br>                <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> tree2:<br>                    currTree = TreeNode(i)<br>                    currTree.left = l<br>                    currTree.right = r<br>                    res.append(currTree)<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generateTrees</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[TreeNode]]:<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> []<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.generateTree(<span class="hljs-number">1</span>, n)<br></code></pre></td></tr></table></figure><h3 id="10、快速排序详解及应用"><a href="#10、快速排序详解及应用" class="headerlink" title="10、快速排序详解及应用"></a>10、快速排序详解及应用</h3><ul><li>快速排序的框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span> &#123;<br>    <span class="hljs-keyword">if</span> (lo &gt;= hi) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 对 nums[lo..hi] 进行切分</span><br>    <span class="hljs-comment">// 使得 nums[lo..p-1] &lt;= nums[p] &lt; nums[p+1..hi]</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> partition(nums, lo, hi);<br>    <span class="hljs-comment">// 去左右子数组进行切分</span><br>    sort(nums, lo, p - <span class="hljs-number">1</span>);<br>    sort(nums, p + <span class="hljs-number">1</span>, hi);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">randomized_partition</span>(<span class="hljs-params">self, nums, l, r</span>):<br>        pivot = random.randint(l, r)<br>        nums[pivot], nums[r] = nums[r], nums[pivot]    <span class="hljs-comment"># 将主元放在最后</span><br>        i = l - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l, r):<br>            <span class="hljs-keyword">if</span> nums[j] &lt; nums[r]:<br>                i += <span class="hljs-number">1</span><br>                nums[j], nums[i] = nums[i], nums[j]<br>        i += <span class="hljs-number">1</span><br>        nums[i], nums[r] = nums[r], nums[i]<br>        <span class="hljs-keyword">return</span> i<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">randomized_quicksort</span>(<span class="hljs-params">self, nums, l, r</span>):<br>        <span class="hljs-keyword">if</span> r - l &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span><br>        mid = self.randomized_partition(nums, l, r)<br>        self.randomized_quicksort(nums, l, mid - <span class="hljs-number">1</span>)<br>        self.randomized_quicksort(nums, mid + <span class="hljs-number">1</span>, r)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        self.randomized_quicksort(nums, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><blockquote><p>学习一下官方给出的快速排序的代码。这里他用了随机选择主元的策略。</p></blockquote><h3 id="11、最近公共祖先"><a href="#11、最近公共祖先" class="headerlink" title="11、最近公共祖先"></a>11、最近公共祖先</h3><ul><li>二叉搜索树的最近公共祖先</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lowestCommonAncestor</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, p: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, q: <span class="hljs-string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;TreeNode&#x27;</span>:<br>        <span class="hljs-keyword">while</span> root:<br>            <span class="hljs-keyword">if</span> root.val &lt; p.val <span class="hljs-keyword">and</span> root.val &lt; q.val:<br>                root = root.right<br>            <span class="hljs-keyword">elif</span> root.val &gt; p.val <span class="hljs-keyword">and</span> root.val &gt; q.val:<br>                root = root.left<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><ul><li>二叉树的最近公共祖先</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, root, p, q</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> root.val == p.val <span class="hljs-keyword">or</span> root.val == q.val:<br>            <span class="hljs-keyword">return</span> root<br>        <span class="hljs-keyword">else</span>:<br>            left = self.find(root.left, p, q)<br>            right = self.find(root.right, p, q)<br>            <span class="hljs-keyword">if</span> left != <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> right != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> root<br>            <br>            <span class="hljs-keyword">if</span> left != <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> left<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> right<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lowestCommonAncestor</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, p: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, q: <span class="hljs-string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;TreeNode&#x27;</span>:<br>        <span class="hljs-keyword">return</span> self.find(root, p, q)<br></code></pre></td></tr></table></figure><blockquote><p>可以发现，利用二叉搜索树的性质的算法会比普通二叉树的算法方便很多。</p></blockquote><h2 id="图算法"><a href="#图算法" class="headerlink" title="图算法"></a>图算法</h2><blockquote><p>图的本质是，高级一点的多叉树。常通过邻接表和邻接矩阵来实现。</p></blockquote><h3 id="1、图论基础与遍历算法"><a href="#1、图论基础与遍历算法" class="headerlink" title="1、图论基础与遍历算法"></a>1、图论基础与遍历算法</h3><ul><li>图的遍历框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 记录被遍历过的节点</span><br><span class="hljs-type">boolean</span>[] visited;<br><span class="hljs-comment">// 记录从起点到当前节点的路径</span><br><span class="hljs-type">boolean</span>[] onPath;<br><br><span class="hljs-comment">/* 图遍历框架 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(Graph graph, <span class="hljs-type">int</span> s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (visited[s]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 经过节点 s，标记为已遍历</span><br>    visited[s] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 做选择：标记节点 s 在路径上</span><br>    onPath[s] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor : graph.neighbors(s)) &#123;<br>        traverse(graph, neighbor);<br>    &#125;<br>    <span class="hljs-comment">// 撤销选择：节点 s 离开路径</span><br>    onPath[s] = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>所有可能路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">allPathsSourceTarget</span>(<span class="hljs-params">self, graph: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        self.ret = []<br>        self.tmp_path, self.tmp_visited = [], []<br>        self.traverse(graph, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(graph) - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> self.ret<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, graph, start, end</span>):<br>        <span class="hljs-comment"># if start in self.tmp_visited: return</span><br>        <span class="hljs-comment"># else: self.tmp_visited.append(start)</span><br><br>        self.tmp_path.append(start)<br>        <span class="hljs-keyword">if</span> start == end:<br>            self.ret.append(self.tmp_path[:])<span class="hljs-comment"># 这个点需要注意⚠️</span><br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> graph[start]:<br>            self.traverse(graph, child, end)<br>        self.tmp_path.pop()<br></code></pre></td></tr></table></figure><blockquote><p>这里不需要记录访问过的节点。通过记录当前访问的路径，并把满足要求的路径存储。</p></blockquote><h3 id="2、环检测与拓扑排序算法"><a href="#2、环检测与拓扑排序算法" class="headerlink" title="2、环检测与拓扑排序算法"></a>2、环检测与拓扑排序算法</h3><ul><li>课程表</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canFinish</span>(<span class="hljs-params">self, numCourses: <span class="hljs-built_in">int</span>, prerequisites: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        edges = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        visited = [<span class="hljs-number">0</span>] * numCourses<br>        valid = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> prerequisites:<br>            edges[info[<span class="hljs-number">1</span>]].append(info[<span class="hljs-number">0</span>])<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">nonlocal</span> valid<br>            visited[u] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> edges[u]:<br>                <span class="hljs-keyword">if</span> visited[v] == <span class="hljs-number">0</span>:<br>                    dfs(v)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid:<br>                        <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">elif</span> visited[v] == <span class="hljs-number">1</span>:<br>                    valid = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">return</span><br>            visited[u] = <span class="hljs-number">2</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numCourses):<br>            <span class="hljs-keyword">if</span> valid <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> visited[i]:<br>                dfs(i)<br>        <br>        <span class="hljs-keyword">return</span> valid<br></code></pre></td></tr></table></figure><blockquote><p>先建图，然后判断图是否有环。</p></blockquote><ul><li>课程表2</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findOrder</span>(<span class="hljs-params">self, numCourses: <span class="hljs-built_in">int</span>, prerequisites: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-comment"># 存储有向图</span><br>        edges = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-comment"># 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span><br>        visited = [<span class="hljs-number">0</span>] * numCourses<br>        <span class="hljs-comment"># 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶</span><br>        result = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-comment"># 判断有向图中是否有环</span><br>        valid = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> prerequisites:<br>            edges[info[<span class="hljs-number">1</span>]].append(info[<span class="hljs-number">0</span>])<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">nonlocal</span> valid<br>            <span class="hljs-comment"># 将节点标记为「搜索中」</span><br>            visited[u] = <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 搜索其相邻节点</span><br>            <span class="hljs-comment"># 只要发现有环，立刻停止搜索</span><br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> edges[u]:<br>                <span class="hljs-comment"># 如果「未搜索」那么搜索相邻节点</span><br>                <span class="hljs-keyword">if</span> visited[v] == <span class="hljs-number">0</span>:<br>                    dfs(v)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid:<br>                        <span class="hljs-keyword">return</span><br>                <span class="hljs-comment"># 如果「搜索中」说明找到了环</span><br>                <span class="hljs-keyword">elif</span> visited[v] == <span class="hljs-number">1</span>:<br>                    valid = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">return</span><br>            <span class="hljs-comment"># 将节点标记为「已完成」</span><br>            visited[u] = <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 将节点入栈</span><br>            result.append(u)<br>        <br>        <span class="hljs-comment"># 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numCourses):<br>            <span class="hljs-keyword">if</span> valid <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> visited[i]:<br>                dfs(i)<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>()<br>        <br>        <span class="hljs-comment"># 如果没有环，那么就有拓扑排序</span><br>        <span class="hljs-comment"># 注意下标 0 为栈底，因此需要将数组反序输出</span><br>        <span class="hljs-keyword">return</span> result[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><blockquote><p>这类两道题还没理解透，有空再研究研究。</p></blockquote><h3 id="3、二分图判定算法"><a href="#3、二分图判定算法" class="headerlink" title="3、二分图判定算法"></a>3、二分图判定算法</h3><blockquote><p>二分图的顶点集可分割为两个互不相交的子集，图中每条边依附的两个顶点都分属于这两个子集，且两个子集内的顶点不相邻。</p></blockquote><ul><li>判断二分图</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isBipartite</span>(<span class="hljs-params">self, graph: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        n = <span class="hljs-built_in">len</span>(graph)<br>        self.visited = [<span class="hljs-number">0</span>] * n<br>        self.color = [<span class="hljs-literal">True</span>] * n<br>        self.valid = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> self.valid <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.visited[i]:<br>                self.traverse(graph, i)<br>        <span class="hljs-keyword">return</span> self.valid<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, graph, node</span>):<br>        self.visited[node] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[node]:<br>            <span class="hljs-keyword">if</span> self.visited[v] == <span class="hljs-number">0</span>:<br>                self.color[v] = <span class="hljs-keyword">not</span> self.color[node]<br>                self.traverse(graph, v)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> self.color[v] == self.color[node]:<br>                    self.valid = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">return</span><br><br></code></pre></td></tr></table></figure><ul><li>可能的二分法</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">possibleBipartition</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, dislikes: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        graph = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-keyword">for</span> di <span class="hljs-keyword">in</span> dislikes:<br>            graph[di[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>].append(di[<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>)<br>            graph[di[<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>].append(di[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>)<span class="hljs-comment"># 这里我一时没想到要两个方向都建一遍</span><br>        <br>        self.valid = <span class="hljs-literal">True</span><br>        self.visited, self.group = [<span class="hljs-number">0</span>]*n, [<span class="hljs-literal">False</span>]*n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> self.valid <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.visited[i]:<br>                self.traverse(graph, i)<br>        <span class="hljs-keyword">return</span> self.valid<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, graph, node</span>):<br>        self.visited[node] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[node]:<br>            <span class="hljs-keyword">if</span> self.visited[v]:<br>                <span class="hljs-keyword">if</span> self.group[v] == self.group[node]:<br>                    self.valid = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                self.group[v] = <span class="hljs-keyword">not</span> self.group[node]<br>                self.traverse(graph, v)<br></code></pre></td></tr></table></figure><h3 id="4、并查集算法"><a href="#4、并查集算法" class="headerlink" title="4、并查集算法"></a>4、并查集算法</h3><ul><li>基本框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-comment">// 连通分量个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-comment">// 存储每个节点的父节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br><br>    <span class="hljs-comment">// n 为图中节点的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UF</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = n;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            parent[i] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将节点 p 和节点 q 连通</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootP</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootQ</span> <span class="hljs-operator">=</span> find(q);<br>        <br>        <span class="hljs-keyword">if</span> (rootP == rootQ)<br>            <span class="hljs-keyword">return</span>;<br>        <br>        parent[rootQ] = rootP;<br>        <span class="hljs-comment">// 两个连通分量合并成一个连通分量</span><br>        count--;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断节点 p 和节点 q 是否连通</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootP</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootQ</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">return</span> rootP == rootQ;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (parent[x] != x) &#123;<br>            parent[x] = find(parent[x]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parent[x];<br>    &#125;<br><br>    <span class="hljs-comment">// 返回图中的连通分量个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>等式方程的可满足行（并查集的应用）</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self.parent = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>))<span class="hljs-comment"># 最开始，每一个节点的根节点都是自己</span><br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, index</span>):<br>            <span class="hljs-keyword">if</span> index == self.parent[index]:<span class="hljs-comment"># 如果根节点是自己，则返回</span><br>                <span class="hljs-keyword">return</span> index<br>            self.parent[index] = self.find(self.parent[index])   <span class="hljs-comment"># 递归查找最根的根节点</span><br>            <span class="hljs-keyword">return</span> self.parent[index]<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">union</span>(<span class="hljs-params">self, index1, index2</span>):<br>            self.parent[self.find(index1)] = self.find(index2)  <span class="hljs-comment"># 将index1的根节点设为index2的根节点</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">equationsPossible</span>(<span class="hljs-params">self, equations: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        groups = UnionFind()<br>        <span class="hljs-keyword">for</span> equation <span class="hljs-keyword">in</span> equations:<br>            <span class="hljs-keyword">if</span> equation[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;=&#x27;</span>:<br>                groups.union(<span class="hljs-built_in">ord</span>(equation[<span class="hljs-number">0</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>), <span class="hljs-built_in">ord</span>(equation[<span class="hljs-number">3</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>        <br>        <span class="hljs-keyword">for</span> equation <span class="hljs-keyword">in</span> equations:<br>            <span class="hljs-keyword">if</span> equation[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;!&#x27;</span>:<br>                <span class="hljs-keyword">if</span> groups.find(<span class="hljs-built_in">ord</span>(equation[<span class="hljs-number">0</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) == groups.find(<span class="hljs-built_in">ord</span>(equation[<span class="hljs-number">3</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><blockquote><p>一个简单的并查集应用，主要是学习一下并查集的类怎么写。</p></blockquote><h3 id="4、kruscal最小生成树算法"><a href="#4、kruscal最小生成树算法" class="headerlink" title="4、kruscal最小生成树算法"></a>4、kruscal最小生成树算法</h3><blockquote><p>从小到大的加入可加入的边</p></blockquote><ul><li>连接所有点的最小费用</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UF</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.parent = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        self.count = n<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">if</span> index == self.parent[index]:<br>            <span class="hljs-keyword">return</span> index<br>        self.parent[index] = self.find(self.parent[index])<br>        <span class="hljs-keyword">return</span> self.parent[index]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">union</span>(<span class="hljs-params">self, index1, index2</span>):<br>        self.parent[self.find(index1)] = self.find(index2)<br>        self.count -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minCostConnectPoints</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dists = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(points)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(points)):<br>                dists.append([i, j, <span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">0</span>]-points[j][<span class="hljs-number">0</span>]) + <span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">1</span>]-points[j][<span class="hljs-number">1</span>])])<br><br>        dists.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>])<br>        <br>        uf = UF(<span class="hljs-built_in">len</span>(points))<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> dist <span class="hljs-keyword">in</span> dists:<br>            <span class="hljs-keyword">if</span> uf.count == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-keyword">if</span> uf.find(dist[<span class="hljs-number">0</span>]) == uf.find(dist[<span class="hljs-number">1</span>]):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                uf.union(dist[<span class="hljs-number">0</span>], dist[<span class="hljs-number">1</span>])<br>                res += dist[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h3 id="5、Prim最小生成树"><a href="#5、Prim最小生成树" class="headerlink" title="5、Prim最小生成树"></a>5、Prim最小生成树</h3><blockquote><p><strong>每次都把权重最小的「横切边」拿出来加入最小生成树，直到把构成最小生成树的所有边都切出来为止</strong>。</p><p>从一个点开始，不断选择能够扩展树的最小边，直到包含所有树。</p></blockquote><ul><li>连接所有点的最小费用</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minCostConnectPoints</span>(<span class="hljs-params">self, points</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">prim</span>(<span class="hljs-params">points, start</span>):<br>            ans = <span class="hljs-number">0</span><br>            n = <span class="hljs-built_in">len</span>(points)<br>            <span class="hljs-comment"># 1. 邻接矩阵 G</span><br>            dist = [[<span class="hljs-number">0</span>] * (n) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-comment"># g[i][j] 表示pointi 到pointj的曼哈顿距离</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>                    d = <span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">0</span>] - points[j][<span class="hljs-number">0</span>]) + <span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">1</span>] - points[j][<span class="hljs-number">1</span>])<br>                    dist[i][j] = d<br>                    dist[j][i] = d<br>            <span class="hljs-comment"># print(dist)</span><br>            <span class="hljs-comment"># 2. lowcost数组 表示没加入生成树的节点V 到 Vnew树中节点的最小距离 加入后置为-1</span><br>            lowcost = [<span class="hljs-number">2</span>**<span class="hljs-number">31</span>] * n<br><br>            <span class="hljs-comment"># 3. Vnew数组 表示V[i] 是否加入到了Vnew中 初始-1 加入后记为0</span><br>            Vnew = [<span class="hljs-literal">False</span>] * n<br><br>            <span class="hljs-comment"># init 起始将start加入Vnew  并且更改lowcast</span><br>            Vnew[start] = <span class="hljs-literal">True</span><br>            lowcost[start] = -<span class="hljs-number">1</span><br>            <span class="hljs-comment"># init 初始化其余点i到start的lowcost[i]</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">if</span> i == start:<br>                    <span class="hljs-keyword">continue</span><br>                lowcost[i] = dist[i][start]<br><br>            <span class="hljs-comment"># 核心 对剩余的n-1 points 陆续加入到Vnew</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n): <span class="hljs-comment"># n - 1次</span><br>                <span class="hljs-comment"># 每次遍历的2个超参</span><br>                minVal = <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> <span class="hljs-comment"># 记录没有加入到Vnew的point到Vnew节点的最小距离</span><br>                minIndex = -<span class="hljs-number">1</span> <span class="hljs-comment"># 记录对应的索引</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n): <span class="hljs-comment"># 顶点</span><br>                    <span class="hljs-keyword">if</span> Vnew[j] == <span class="hljs-literal">True</span>: <span class="hljs-comment"># 已经加入</span><br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> lowcost[j] &lt; minVal:<br>                        minVal = lowcost[j]<br>                        minIndex = j<br>                <span class="hljs-comment"># 更新答案</span><br>                ans += minVal<br>                Vnew[minIndex] = <span class="hljs-literal">True</span><br>                lowcost[minIndex] = -<span class="hljs-number">1</span><br><br>                <span class="hljs-comment"># 因为Vnew 有新的节点加入, 继续更新lowcost</span><br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                    <span class="hljs-comment"># 注意不需要多次遍历 因为之前已经记录为1次（后续同理） lowcost只需要和当前minIndex距离比较  然后每次都会更新成最小距离</span><br>                    <span class="hljs-keyword">if</span> Vnew[k] == <span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> lowcost[k] &gt; dist[k][minIndex]:<br>                        lowcost[k] = dist[k][minIndex]<br>            <br>            <span class="hljs-keyword">return</span> ans<br><br>                    <br>        res = prim(points, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h3 id="7、Dijkstra算法及模板"><a href="#7、Dijkstra算法及模板" class="headerlink" title="7、Dijkstra算法及模板"></a>7、Dijkstra算法及模板</h3><ul><li>java伪代码框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回节点 from 到节点 to 之间的边的权重</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">weight</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span>;<br><br><span class="hljs-comment">// 输入节点 s 返回 s 的相邻节点</span><br>List&lt;Integer&gt; <span class="hljs-title function_">adj</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span>;<br><br><span class="hljs-comment">// 输入一幅图和一个起点 start，计算 start 到其他节点的最短距离</span><br><span class="hljs-type">int</span>[] dijkstra(<span class="hljs-type">int</span> start, List&lt;Integer&gt;[] graph) &#123;<br>    <span class="hljs-comment">// 图中节点的个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">V</span> <span class="hljs-operator">=</span> graph.length;<br>    <span class="hljs-comment">// 记录最短路径的权重，你可以理解为 dp table</span><br>    <span class="hljs-comment">// 定义：distTo[i] 的值就是节点 start 到达节点 i 的最短路径权重</span><br>    <span class="hljs-type">int</span>[] distTo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[V];<br>    <span class="hljs-comment">// 求最小值，所以 dp table 初始化为正无穷</span><br>    Arrays.fill(distTo, Integer.MAX_VALUE);<br>    <span class="hljs-comment">// base case，start 到 start 的最短距离就是 0</span><br>    distTo[start] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 优先级队列，distFromStart 较小的排在前面</span><br>    Queue&lt;State&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; &#123;<br>        <span class="hljs-keyword">return</span> a.distFromStart - b.distFromStart;<br>    &#125;);<br><br>    <span class="hljs-comment">// 从起点 start 开始进行 BFS</span><br>    pq.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">State</span>(start, <span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">while</span> (!pq.isEmpty()) &#123;<br>        <span class="hljs-type">State</span> <span class="hljs-variable">curState</span> <span class="hljs-operator">=</span> pq.poll();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curNodeID</span> <span class="hljs-operator">=</span> curState.id;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curDistFromStart</span> <span class="hljs-operator">=</span> curState.distFromStart;<br><br>        <span class="hljs-keyword">if</span> (curDistFromStart &gt; distTo[curNodeID]) &#123;<br>            <span class="hljs-comment">// 已经有一条更短的路径到达 curNode 节点了</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// 将 curNode 的相邻节点装入队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> nextNodeID : adj(curNodeID)) &#123;<br>            <span class="hljs-comment">// 看看从 curNode 达到 nextNode 的距离是否会更短</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">distToNextNode</span> <span class="hljs-operator">=</span> distTo[curNodeID] + weight(curNodeID, nextNodeID);<br>            <span class="hljs-keyword">if</span> (distTo[nextNodeID] &gt; distToNextNode) &#123;<br>                <span class="hljs-comment">// 更新 dp table</span><br>                distTo[nextNodeID] = distToNextNode;<br>                <span class="hljs-comment">// 将这个节点以及距离放入队列</span><br>                pq.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">State</span>(nextNodeID, distToNextNode));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> distTo;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>网络延迟时间</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">networkDelayTime</span>(<span class="hljs-params">self, times: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        graph = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-keyword">for</span> time <span class="hljs-keyword">in</span> times:<br>            graph[time[<span class="hljs-number">0</span>]].append([time[<span class="hljs-number">1</span>], time[<span class="hljs-number">2</span>]])<br><br>        min_dist = [<span class="hljs-number">2</span>**<span class="hljs-number">32</span>] * (n+<span class="hljs-number">1</span>)<br>        min_dist[k] = <span class="hljs-number">0</span><br>        pool = [k]<br>        <span class="hljs-keyword">while</span> pool:<br>            cur_point = pool.pop(<span class="hljs-number">0</span>)<br>            cur_dist = min_dist[cur_point]<br>            <span class="hljs-keyword">for</span> v, w <span class="hljs-keyword">in</span> graph[cur_point]:<br>                tmp_dist = w + cur_dist<br>                <span class="hljs-keyword">if</span> tmp_dist &lt; min_dist[v]:<br>                    pool.append(v)<br>                    min_dist[v] = tmp_dist<br>        res = <span class="hljs-built_in">max</span>(min_dist[<span class="hljs-number">1</span>:])<br>        <span class="hljs-keyword">if</span> res == <span class="hljs-number">2</span> ** <span class="hljs-number">32</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><blockquote><p>自己写的一个dijkstra实现</p></blockquote><ul><li>最小消耗体力路径</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumEffortPath</span>(<span class="hljs-params">self, heights: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        m, n = <span class="hljs-built_in">len</span>(heights), <span class="hljs-built_in">len</span>(heights[<span class="hljs-number">0</span>])<br>        q = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)]<br>        dist = [<span class="hljs-number">0</span>] + [<span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)] * (m * n - <span class="hljs-number">1</span>)<br>        seen = <span class="hljs-built_in">set</span>()<br><br>        <span class="hljs-keyword">while</span> q:<br>            d, x, y = heapq.heappop(q)<br>            iden = x * n + y<br>            <span class="hljs-keyword">if</span> iden <span class="hljs-keyword">in</span> seen:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> (x, y) == (m - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">break</span><br>            <br>            seen.add(iden)<br>            <span class="hljs-keyword">for</span> nx, ny <span class="hljs-keyword">in</span> [(x - <span class="hljs-number">1</span>, y), (x + <span class="hljs-number">1</span>, y), (x, y - <span class="hljs-number">1</span>), (x, y + <span class="hljs-number">1</span>)]:<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= nx &lt; m <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= ny &lt; n <span class="hljs-keyword">and</span> <span class="hljs-built_in">max</span>(d, <span class="hljs-built_in">abs</span>(heights[x][y] - heights[nx][ny])) &lt;= dist[nx * n + ny]:<br>                    dist[nx * n + ny] = <span class="hljs-built_in">max</span>(d, <span class="hljs-built_in">abs</span>(heights[x][y] - heights[nx][ny]))<br>                    heapq.heappush(q, (dist[nx * n + ny], nx, ny))<br>        <br>        <span class="hljs-keyword">return</span> dist[m * n - <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><blockquote><p>将矩阵的上下左右作为相邻节点，并将最短路径和修改为最短绝对差。</p></blockquote><ul><li>概率最大的路径</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProbability</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, edges: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], succProb: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], start: <span class="hljs-built_in">int</span>, end: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">float</span>:<br>        graph = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(edges)):<br>            graph[edges[i][<span class="hljs-number">0</span>]].append([edges[i][<span class="hljs-number">1</span>], succProb[i]])<br>            graph[edges[i][<span class="hljs-number">1</span>]].append([edges[i][<span class="hljs-number">0</span>], succProb[i]])<br>        <br>        min_prob = [<span class="hljs-number">1</span>] * n  <span class="hljs-comment"># 失败的概率</span><br>        min_prob[start] = <span class="hljs-number">0</span><br>        pool = [(<span class="hljs-number">0</span>, start)]<br>        <span class="hljs-keyword">while</span> pool:<br>            cur_fail_prob, cur_point = heapq.heappop(pool)<br>            <span class="hljs-keyword">if</span> cur_fail_prob &gt; min_prob[cur_point]:<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">for</span> v, p <span class="hljs-keyword">in</span> graph[cur_point]:<br>                tmp_fail_prob = <span class="hljs-number">1</span> - (<span class="hljs-number">1</span>-cur_fail_prob)*p<br>                <span class="hljs-keyword">if</span> tmp_fail_prob &lt; min_prob[v]:<br>                    min_prob[v] = tmp_fail_prob<br>                    heapq.heappush(pool, (tmp_fail_prob, v))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> - min_prob[end]<br></code></pre></td></tr></table></figure><blockquote><p>将成功概率转为失败概率，然后再用dijkstra。</p></blockquote><h3 id="8、名流问题"><a href="#8、名流问题" class="headerlink" title="8、名流问题"></a>8、名流问题</h3><ul><li>找到小镇的法官</li></ul><h2 id="设计数据结构"><a href="#设计数据结构" class="headerlink" title="设计数据结构"></a>设计数据结构</h2><h3 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key=<span class="hljs-number">0</span>, val=<span class="hljs-number">0</span>, prev=<span class="hljs-literal">None</span>, nxt=<span class="hljs-literal">None</span></span>):<br>        self.key = key<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = nxt<br>        self.prev = prev<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Double</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.head = Node()<br>        self.tail = Node()<br>        self.ll = <span class="hljs-number">0</span><br>        self.head.<span class="hljs-built_in">next</span> = self.tail<br>        self.tail.prev = self.head<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addlast</span>(<span class="hljs-params">self, x</span>):<br>        self.ll += <span class="hljs-number">1</span><br>        x.<span class="hljs-built_in">next</span> = self.tail<br>        x.prev = self.tail.prev<br>        self.tail.prev.<span class="hljs-built_in">next</span> = x<br>        self.tail.prev = x<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, x</span>):<br>        x.prev.<span class="hljs-built_in">next</span> = x.<span class="hljs-built_in">next</span><br>        x.<span class="hljs-built_in">next</span>.prev = x.prev<br>        self.ll -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removefirst</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.head.<span class="hljs-built_in">next</span> == self.tail:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        x = self.head.<span class="hljs-built_in">next</span><br>        self.remove(x)<br>        <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getl</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.ll<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capacity: <span class="hljs-built_in">int</span></span>):<br>        self.cap = capacity<br>        self.linkedlist = Double()<br>        self.<span class="hljs-built_in">map</span> = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.<span class="hljs-built_in">map</span>.keys():<br>            x = self.<span class="hljs-built_in">map</span>[key]<br>            self.linkedlist.remove(x)<br>            self.linkedlist.addlast(x)<br>            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">map</span>[key].val<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span>, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.<span class="hljs-built_in">map</span>.keys():<br>            newnode = Node(key, value)<br>            self.linkedlist.remove(self.<span class="hljs-built_in">map</span>[key])<br>            self.<span class="hljs-built_in">map</span>[key] = newnode<br>            self.linkedlist.addlast(newnode)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> self.linkedlist.getl() == self.cap:<br>            node = self.linkedlist.removefirst()<br>            <span class="hljs-keyword">del</span> self.<span class="hljs-built_in">map</span>[node.key]<br>        newnode = Node(key, value)<br>        self.linkedlist.addlast(newnode)<br>        self.<span class="hljs-built_in">map</span>[key] = newnode<br></code></pre></td></tr></table></figure><blockquote><p>利用双向链表确定删除的先后顺序，利用字典进行快速的映射</p></blockquote><h3 id="LFU算法"><a href="#LFU算法" class="headerlink" title="LFU算法"></a>LFU算法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LFUCache</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capacity: <span class="hljs-built_in">int</span></span>):<br>        self.key2val = &#123;&#125;<br>        self.key2freq = &#123;&#125;<br>        self.freq2key = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        self.cap = capacity<br>        self.min_freq = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.key2val.keys():<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        self.increasefreq(key)<br>        <span class="hljs-keyword">return</span> self.key2val[key]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span>, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> self.cap &lt;= <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.key2val.keys():<br>            self.increasefreq(key)<br>            self.key2val[key] = value<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.key2val) == self.cap:<br>                self.removeleast()<br>            self.key2val[key] = value<br>            self.key2freq[key] = <span class="hljs-number">1</span><br>            self.freq2key[<span class="hljs-number">1</span>].append(key)<br>            self.min_freq = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increasefreq</span>(<span class="hljs-params">self, key</span>):<br>        pre_freq = self.key2freq[key]<br>        self.key2freq[key] = pre_freq + <span class="hljs-number">1</span><br>        key_list = self.freq2key[pre_freq]<br>        key_list.remove(key)<br>        self.freq2key[pre_freq] = key_list<br>        self.freq2key[pre_freq+<span class="hljs-number">1</span>].append(key)<br><br>        <span class="hljs-keyword">if</span> self.freq2key[pre_freq] == []:<br>            <span class="hljs-keyword">del</span> self.freq2key[pre_freq]<br>            <span class="hljs-keyword">if</span> pre_freq == self.min_freq:<br>                self.min_freq += <span class="hljs-number">1</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeleast</span>(<span class="hljs-params">self</span>):<br>        deletekey = self.freq2key[self.min_freq].pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> self.freq2key[self.min_freq] == []:<br>            <span class="hljs-keyword">del</span> self.freq2key[self.min_freq]<br>        <span class="hljs-keyword">del</span> self.key2val[deletekey]<br>        <span class="hljs-keyword">del</span> self.key2freq[deletekey]<br></code></pre></td></tr></table></figure><blockquote><p>使用三个哈希表进行一对一存储。</p></blockquote><h3 id="trie树-前缀树"><a href="#trie树-前缀树" class="headerlink" title="trie树(前缀树)"></a>trie树(前缀树)</h3><blockquote><p>存储字符串的树。每一个节点有256个孩子（256个ascii码）。</p><p>trie用树枝存储字符串（键），用叶子结点存储键对应的值。</p></blockquote><ul><li>实现trie</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val=<span class="hljs-literal">False</span></span>):<br>        self.val = val<br>        self.children = [<span class="hljs-literal">None</span>] * <span class="hljs-number">26</span><br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.root = Node()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        p = self.root<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> word:<br>            <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] = Node()<br>            p = p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>        p.val=<span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        p = self.root<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> word:<br>            <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            p = p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>        <span class="hljs-keyword">return</span> p.val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">startsWith</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        p = self.root<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> prefix:<br>            <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            p = p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>添加与搜索单词</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val=<span class="hljs-literal">False</span></span>):<br>        self.val = val<br>        self.children = [<span class="hljs-literal">None</span>] * <span class="hljs-number">26</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordDictionary</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.root = Node()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addWord</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        p = self.root<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> word:<br>            <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] = Node()<br>            p = p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>        p.val = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">index, node</span>):<br>            <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(word):<br>                <span class="hljs-keyword">return</span> node.val<br>            ch = word[index]<br>            <span class="hljs-keyword">if</span> ch != <span class="hljs-string">&#x27;.&#x27;</span>:<br>                child = node.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>                <span class="hljs-keyword">if</span> child <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> dfs(index + <span class="hljs-number">1</span>, child):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> node.children:<br>                    <span class="hljs-keyword">if</span> child <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> dfs(index + <span class="hljs-number">1</span>, child):<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, self.root)<br></code></pre></td></tr></table></figure><blockquote><p>添加了.的全能替代功能。在遍历到的时候搜索全部子节点就好了。</p></blockquote><ul><li>单词替换</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val=<span class="hljs-literal">False</span></span>):<br>        self.val = val<br>        self.children = [<span class="hljs-literal">None</span>] * <span class="hljs-number">26</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">replaceWords</span>(<span class="hljs-params">self, dictionary: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], sentence: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-comment"># 建trie</span><br>        root = Node()<br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> dictionary:<br>            p = root<br>            <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> word:<br>                <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                    p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] = Node()<br>                p = p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>            p.val = <span class="hljs-literal">True</span><br><br>        <span class="hljs-comment"># 检索</span><br>        words = sentence.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>        res = []<br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>            cur_res = <span class="hljs-literal">None</span><br>            p = root<br>            <span class="hljs-keyword">for</span> i,ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(word):<br>                <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                    cur_res = word<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    p = p.children[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>                    <span class="hljs-keyword">if</span> p.val:<br>                        cur_res = word[:i+<span class="hljs-number">1</span>]<br>                        <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> cur_res == <span class="hljs-literal">None</span>:<br>                cur_res = word<br>            res.append(cur_res)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(res)<br></code></pre></td></tr></table></figure><ul><li>键值映射</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val=<span class="hljs-number">0</span></span>):<br>        self.val = val<br>        self.children = [<span class="hljs-literal">None</span>] * <span class="hljs-number">26</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MapSum</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.root = Node()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">str</span>, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        p = self.root<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> key:<br>            <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] == <span class="hljs-literal">None</span>:<br>                p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] = Node()<br>            p = p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>        p.val = val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        p = self.root<br>        self.ret = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> prefix:<br>            <span class="hljs-keyword">if</span> p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]:<br>                p = p.children[<span class="hljs-built_in">ord</span>(ch)- <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        self.traverse(p)<br>        <span class="hljs-keyword">return</span> self.ret<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">self, root</span>):<br>        self.ret += root.val<br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> root.children:<br>            <span class="hljs-keyword">if</span> child <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                self.traverse(child)<br></code></pre></td></tr></table></figure><h3 id="数据流的中位数"><a href="#数据流的中位数" class="headerlink" title="数据流的中位数"></a>数据流的中位数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.large, self.small = [], []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.small) &gt;= <span class="hljs-built_in">len</span>(self.large):<br>            heapq.heappush(self.small, -num)<br>            heapq.heappush(self.large, -heapq.heappop(self.small))<br>        <span class="hljs-keyword">else</span>:<br>            heapq.heappush(self.large, num)<br>            heapq.heappush(self.small, -heapq.heappop(self.large))<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedian</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">float</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.small) == <span class="hljs-built_in">len</span>(self.large):<br>            <span class="hljs-keyword">return</span> (-self.small[<span class="hljs-number">0</span>]+self.large[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.large[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><blockquote><p>使用两个优先队列维护位于中位数两边的组合。为了让两个队列保持相反的排序，一个存正值一个存负值。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学习ing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker制作比赛镜像</title>
    <link href="/2022/10/19/%E4%BD%BF%E7%94%A8docker%E5%88%B6%E4%BD%9C%E6%AF%94%E8%B5%9B%E9%95%9C%E5%83%8F/"/>
    <url>/2022/10/19/%E4%BD%BF%E7%94%A8docker%E5%88%B6%E4%BD%9C%E6%AF%94%E8%B5%9B%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-基础操作"><a href="#docker-基础操作" class="headerlink" title="docker 基础操作"></a>docker 基础操作</h2><ul><li>列出本地镜像 docker images</li><li>下载镜像                docker pull name:version</li><li>删除镜像                docker rmi name&#x2F;ID</li><li>列出运行容器        docker ps</li><li>列出所有容器        docker ps -a</li><li>新建容器               docker run -it 镜像名&#x2F;ID</li><li>关闭并退出容器    exit（ctrl+d）</li><li>暂时离开容器        crtl+p，ctrl+q</li><li>进入后台运行的容器 docker attach id </li><li>关闭容器                docker kill id</li><li>复制文件                docker cp 本地文件路径 container_id:&#x2F;容器文件路径</li><li>容器保存为镜像     docker commit 容器ID 镜像名:v版本</li><li>输出镜像                docker save -o XXXXX.tar 镜像ID</li><li>修改文件权限         sudo chmod a+rw &#x2F;XXX&#x2F;8f77aae9a091.tar</li></ul><h2 id="将conda环境制作为镜像"><a href="#将conda环境制作为镜像" class="headerlink" title="将conda环境制作为镜像"></a>将conda环境制作为镜像</h2><ul><li><p>docker pull continuumio&#x2F;anaconda3     #下载装有anaconda的镜像</p></li><li><p>docker run -it –name new_anaconda continuumio&#x2F;anaconda3 &#x2F;bin&#x2F;bash       # 使用该镜像进入该容器</p></li><li><p>容器中的anaconda的位置在 &#x2F;opt&#x2F;conda&#x2F;envs</p></li><li><p>docker cp local_anaconda_path&#x2F;envs&#x2F;envs_name new_anaconda:&#x2F;opt&#x2F;conda&#x2F;envs    # 将本地的虚拟环境复制到相应的位置</p></li><li><p>docker commit new_anaconda new_anaconda_image # 导出新镜像</p></li><li><p>docker save new_anaconda_image -o new_anaconda_image.tar      # 生成镜像文件</p></li></ul><h2 id="我的docker镜像制作流程"><a href="#我的docker镜像制作流程" class="headerlink" title="我的docker镜像制作流程"></a>我的docker镜像制作流程</h2><ul><li>后来比赛不要求提交镜像了，所以最后没有自己制作镜像。</li><li>这部分就当作为后续比赛和工作做准备了吧</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>competition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scene graph paper reading</title>
    <link href="/2022/10/19/scene-graph-paper-reading/"/>
    <url>/2022/10/19/scene-graph-paper-reading/</url>
    
    <content type="html"><![CDATA[<h1 id="Scene-Graph-Paper-Reading"><a href="#Scene-Graph-Paper-Reading" class="headerlink" title="Scene Graph Paper Reading"></a>Scene Graph Paper Reading</h1><h2 id="1-Visual-Relationship-Detection-with-Language-Priors"><a href="#1-Visual-Relationship-Detection-with-Language-Priors" class="headerlink" title="1.Visual Relationship Detection with Language Priors"></a>1.Visual Relationship Detection with Language Priors</h2><h5 id="ECCV-2016-http-arxiv-org-pdf-1608-00187v1"><a href="#ECCV-2016-http-arxiv-org-pdf-1608-00187v1" class="headerlink" title="ECCV 2016 http://arxiv.org/pdf/1608.00187v1"></a>ECCV 2016 <a href="http://arxiv.org/pdf/1608.00187v1">http://arxiv.org/pdf/1608.00187v1</a></h5><ul><li>两大发现<ul><li>尽管大多数的relationship并不常见，但是它们的object和predicate却更频繁地独立出现。<ul><li>利用这个insight分别独立训练object和predicate的模型，然后再进行组合来预测。</li></ul></li><li>relationship之间有semantic的关联。比如person riding a horse和person riding an elephant在语义上式相似的，因为horse和elephant都是animal，即使模型没有见过很多person riding an elephant，也可以从person riding a horse进行推断</li></ul></li><li>本文方法<ul><li>学习object和predicate的外观模型</li><li>使用从language学习到的relationship embedding space</li></ul></li><li>指标<ul><li><strong>Recall @ x</strong> computes the fraction of times the correct relationship is predicted in the top x confident relationship predictions.</li><li>mean average precision (<strong>mAP</strong>) is a pessimistic evaluation metric because we can not exhaustively annotate all possible relationships in an image.</li></ul></li><li>检测物体视觉关系三种形式<ul><li>predicate detection<ul><li>input: an image and set of localized objects</li><li>task: predict a set of possible predicates between pairs of objects</li></ul></li><li>phrase detection<ul><li>input: an image</li><li>task: output a label &lt;object1 - predicate - object2&gt; and localize the entire relationship as one bounding box having at least 0.5 overlap with ground truth box</li></ul></li><li>relationship detection<ul><li>input: an image</li><li>task: output a set of &lt;object1 - predicate - object2&gt; and localize both object1 and object2 in the image having at least 0.5 overlap with their ground truth boxes simultaneously.</li></ul></li></ul></li></ul><h4 id="Training-Approach"><a href="#Training-Approach" class="headerlink" title="Training Approach"></a>Training Approach</h4><ul><li>Visual Appearance Module<ul><li>训练一个卷积网络用以物体分类，另一个卷积网络接收union box为输入进行predicate分类。</li><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144043217.png" alt="image-20211029144043217"></li><li>其中i，j代表物体类别，k代表predicate类别。</li></ul></li><li>Language Module<ul><li>insight是relationship之间是有语义联系的。语言模型将relationship都映射到了一个embedding space，在其中相似的relationship会很近</li><li><em><strong>映射函数 projection function</strong></em><ul><li>使用预先训练的词向量word vectors，将参与relationship的两个object转换到embedding space，然后将两个vector进行concat在用一个映射函数W转换到relationship vector space</li><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144553378.png" alt="image-20211029144553378"></li><li>其中w_k为600维，t为300维，每个k得到一个score。</li></ul></li><li><em><strong>训练映射函数</strong></em>  Training Projection Function<ul><li>希望映射函数f能将相似的relationship映射得更近。用一个启发式的方法来对这个问题进行建模，希望两个relationship之间的距离和它们的对应objects以及predicate之间的word2vec距离成正比。</li><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144619310.png" alt="image-20211029144619310"></li><li>d是两个relationship的object和predicate在word2vec space的cosine距离之和。为了得到上式的结果，也就是我们希望W能使所有的R参与上面的计算得到的constant是很接近的，因此想办法优化方差var，采样数目设为500K，最小化方差</li><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144627199.png" alt="image-20211029144627199"></li></ul></li><li><em><strong>关系的似然</strong></em> Likelihood of a Relationship<ul><li>映射函数的结果应该能够理想地反映一个visual relationship的似然。基本想法是希望训练集中出现频率越高的relationship的似然也应该更大，paper用一个rank loss来建模</li><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144652104.png" alt="image-20211029144652104"></li><li>R比R’出现的更频繁 所以希望<img src="https://img-blog.csdnimg.cn/20181120102937639.png" alt="img"></li></ul></li></ul></li><li><em><strong>目标函数</strong></em> Objective function<ul><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144705674.png" alt="image-20211029144705674"></li><li>这个优化函数能使ground truth relationship的rank大。最终的objective function为：</li><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211029144713741.png" alt="image-20211029144713741"></li><li>K是关于W的双二次方程，有二次闭式解，在C和L上使用随机梯度下降法，大约迭代20-25次收敛。双二次方程指的是只含偶次项的多项式。</li></ul></li></ul><h4 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h4><ul><li>先用RCNN生成candidate object proposals，RCNN是会判断object类别的，然后对每对object pair都用appearance model和language model预测relationship。</li></ul><h2 id="2-Pixels-to-Graphs-by-Associative-Embedding"><a href="#2-Pixels-to-Graphs-by-Associative-Embedding" class="headerlink" title="2.Pixels to Graphs by Associative Embedding"></a>2.Pixels to Graphs by Associative Embedding</h2><h5 id="NIPS-2017-http-arxiv-org-pdf-1706-07365v2"><a href="#NIPS-2017-http-arxiv-org-pdf-1706-07365v2" class="headerlink" title="NIPS 2017 http://arxiv.org/pdf/1706.07365v2"></a>NIPS 2017 <a href="http://arxiv.org/pdf/1706.07365v2">http://arxiv.org/pdf/1706.07365v2</a></h5><ul><li>目标：从像素中构建图<ul><li>首先检测最后要得到的场景图的每个元素，包括节点和边（检测物体以及关系在图上的bbox）</li><li>对这些元素进行组合（决定每条边应该和哪两个点相连）</li></ul></li><li>关键是associative embedding</li></ul><h4 id="Detecting-graph-elements"><a href="#Detecting-graph-elements" class="headerlink" title="Detecting graph elements"></a>Detecting graph elements</h4><p><strong>将图片通过堆叠的hourglass网络得到逐像素的特征tensor，之后会分为两条路，一条利用该tensor产生存在的似然，另一条对似然较高的vector利用全连接进行属性的判断</strong></p><ul><li><p>找到组成一张图的所有的节点和边</p><ul><li>bounding box的中心坐标就是场景图中点对应的位置</li><li>边的位置则是其两个关联的bounding box的中心坐标的均值</li></ul></li><li><p>使用一个神经网络能够产生一个高分辨率的特征图</p><ul><li>特征图上每个像素与原图像素一一对应</li><li>每个位置的vector则表示这个位置是否存在一个节点或者边，如果是存在的就用该vector来预测这个元素的属性</li></ul></li><li><p>卷积神经网络</p><ul><li>处理图像并产生<code>h*w*f</code>的tensor，encode在一个长度为f的vector</li></ul></li><li><p>产生使用堆叠的hourglass网络</p><ul><li>结合局部和全局的信息在整张图片上推理从而产生高质量的逐像素的预测</li><li>提高分辨率-&gt;提高定位准确性</li><li>分辨率越小，越容易发生重叠</li></ul></li><li><p>在由hourglass网络得到的特征tensor上使用1*1卷积和非线性激活函数得到两个heatmap分别对应点和边</p><ul><li>heatmap的每个像素值表示原图的该位置上有一个点或者边存在的似然–&gt;得到存在的似然</li><li>监督信号是一个和输出一样分辨率的0，1矩阵</li><li>损失函数直接使用交叉熵即可</li></ul></li><li><p>预测具体属性</p><ul><li>类别，object的bounding box</li></ul></li><li><p>预测某个位置的检测结果的属性</p><ul><li>直接将该位置对应的vector输入一个全连接网络</li></ul></li></ul><h4 id="Connecting-elements-with-associative-embedding"><a href="#Connecting-elements-with-associative-embedding" class="headerlink" title="Connecting elements with associative embedding"></a><em><strong>Connecting elements with associative embedding</strong></em></h4><p>将第一步的检测结果组合以得到完整的关系图</p><ul><li>得到检测结果的属性<ul><li>点：vector形式的唯一标志</li><li>边：与之关联的两个点</li><li>网络必须保证不同点的标志应该是不一样的，但指向相同物体的点的标志应该是相同的</li></ul></li><li>假设每个节点的标志embedding为<code>h_i</code>，所有与之相连的边中它的embedding是<code>h_ik（k=1,…,K_i）</code>,<code>K_i</code>是与之相连的总的边数。<ul><li>为了匹配点和边，需要一个“pull together”损失：<br><img src="https://img-blog.csdnimg.cn/20181101174510117.png" alt="在这里插入图片描述"></li><li>另一方面为了区分不同的点，需要一个“push apart”损失：<br><img src="https://img-blog.csdnimg.cn/20181101174514771.png" alt="在这里插入图片描述"></li></ul></li></ul><h4 id="Support-for-overlapping-detections"><a href="#Support-for-overlapping-detections" class="headerlink" title="Support for overlapping detections"></a><em><strong>Support for overlapping detections</strong></em></h4><ul><li><p>利用类似于anchor的机制，引入一个新的维度</p><ul><li>可以放多个检测结果，并且这个维度上每个位置的检测结果是与其视觉特征有关的</li><li>对物体可行，对关系不可行</li><li>会强制检测结果的像素位置，但允许它出现在该位置的新维度上的任何地方（不强制特征与检测结果在该维度的位置的关系）</li><li>在训练时就必须要一个额外的步骤来确定可能的位置，这样才能计算损失</li></ul></li><li><p>用于物体和关系的新维度分别为s_o和s_r</p><ul><li>每个像素点对应的vector就要用来产生s_o个物体（类别，bounding box，embedding）和s_r个关系（类别，sub_embedding，obj_embedding）</li><li>采用了s_o+s_r个不同的全连接网络，分别对新维度上每个位置的物体和关系进行预测</li><li>原本的两副heatmap也应该增加到新的维度</li></ul></li><li><p>寻找match</p><ul><li>物体：对于物体，网络在每个像素点产生s_o个结果，我们将ground truth的类别one-hot编码以及bounding box与每个预测结果进行比较，选择最match的来求损失函数，此处使用了匈牙利算法来寻找一个最优match，而且要注意两个ground truth不能与相同的位置match</li><li>关系：用于match的向量成了类别one-hot码以及两个关联物体的标志embedding的拼接</li><li>match只在训练时需要，推理时不需要</li></ul></li></ul><h5 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h5><ul><li>扩展object detection的heatmap的通道数为2，一个通道表示检测结果的中心，一个通道作为bounding box的mask</li></ul><h2 id="3-Neural-Motifs-Scene-Graph-Parsing-with-Global-Context"><a href="#3-Neural-Motifs-Scene-Graph-Parsing-with-Global-Context" class="headerlink" title="3.Neural Motifs: Scene Graph Parsing with Global Context"></a>3.Neural Motifs: Scene Graph Parsing with Global Context</h2><h5 id="CVPR-2018-DOI-10-1109-x2F-CVPR-2018-00611"><a href="#CVPR-2018-DOI-10-1109-x2F-CVPR-2018-00611" class="headerlink" title="CVPR 2018 DOI:10.1109&#x2F;CVPR.2018.00611"></a>CVPR 2018 DOI:<a href="https://doi.org/10.1109/CVPR.2018.00611">10.1109&#x2F;CVPR.2018.00611</a></h5><ul><li><p>Motif:场景图中规律出现的子结构</p></li><li><p>两个发现</p><ul><li>局部图结构有很强的规律性（一旦给定物体种类，关系的分布就高度倾斜，反之不然）</li><li>在大的子图中依旧存在结构化图案</li></ul></li><li><p>baseline：给定对象检测，预测具有给定标签的对象对之间最频繁的关系</p></li><li><p>Stacked Motif Network</p></li></ul><h4 id="场景图形式化定义"><a href="#场景图形式化定义" class="headerlink" title="场景图形式化定义"></a>场景图形式化定义</h4><ul><li><p>G: scene graph</p></li><li><p>B &#x3D; {b1, . . . , bn} of bounding boxes,</p></li><li><p>O &#x3D; {o1, . . . , on} of objects,</p></li><li><p>R &#x3D; {r1, . . . , rm} of binary relationships between those objects</p><ul><li>$$<br>r_k\in R: triplet\<br>a\ start\ node (bi, oi) \in B × O\<br>an\ end\ node (bj, oj) \in B × O\<br>a\ relationship\ label\ x_{i→j} \in R<br>$$</li></ul></li></ul><h4 id="quantitative-insights-on-the-structural-regularities-of-scene-graphs"><a href="#quantitative-insights-on-the-structural-regularities-of-scene-graphs" class="headerlink" title="quantitative insights on the structural regularities of scene graphs"></a>quantitative insights on the structural regularities of scene graphs</h4><ul><li>常见的语义先验在生成准确的场景图中有着重要作用</li><li>关系的局部分布具有显著的结构<ul><li>边信息不能很好反应其他元素的信息</li><li>头和尾的信息对于彼此和边的预测都有意义</li></ul></li><li>给定关系对信息，边的信息可以得到很好的预测</li><li>场景图除了局部结构外，还有高阶结构</li><li>提取MOTIFS<ul><li>提取两个组合的图案，用原子符号替换所有的图案实例，并挖掘出新的图案。</li><li>motif: 在训练集出现至少50次，组合出现可能性比单独出现至少多10倍</li></ul></li></ul><h4 id="Stacked-Motif-Network-MOTIFNET"><a href="#Stacked-Motif-Network-MOTIFNET" class="headerlink" title="Stacked Motif Network (MOTIFNET)"></a>Stacked Motif Network (MOTIFNET)</h4><ul><li><p><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211115154019751.png" alt="image-20211115154019751"></p><ul><li>bounding box model： 物体检测</li><li>object model：给定一组B，对B线性化为一组LSTM可以处理的线性序列</li><li>relation model：线性化一组预测的带标签的O，用LSTM创建物体的表示</li></ul></li><li><p>object detector</p><ul><li>use Faster RCNN with a VGG backbone</li><li>pretrain: optimize the detector using SGD</li><li>integrate the use the detector freezing the convolution layers and duplicating the fully connected layers -&gt; separate branches for object&#x2F;edge features</li></ul></li></ul><h2 id="4-Learning-to-Compose-Dynamic-Tree-Structures-for-Visual-Contexts"><a href="#4-Learning-to-Compose-Dynamic-Tree-Structures-for-Visual-Contexts" class="headerlink" title="4.Learning to Compose Dynamic Tree Structures for Visual Contexts"></a>4.Learning to Compose Dynamic Tree Structures for Visual Contexts</h2><h5 id="CVPR-2019-https-arxiv-org-abs-1812-01880"><a href="#CVPR-2019-https-arxiv-org-abs-1812-01880" class="headerlink" title="CVPR 2019 https://arxiv.org/abs/1812.01880"></a>CVPR 2019 <a href="https://arxiv.org/abs/1812.01880">https://arxiv.org/abs/1812.01880</a></h5><p>VCTREE——为高级推理任务构建面向对象级可视上下文的动态树结构</p><ul><li>VCTREE的优势<ul><li>高效且富有表现力的二叉树能够编码物体之间内在的水平&#x2F;垂直的关系</li><li>动态结构随图像和图像以及任务与任务的变化而变化，从而允许对象之间传递更多特定于内容&#x2F;任务的消息</li><li>支持SGG和VQA</li><li>与MOTIF相比，提高了学习小样本的能力<ul><li>VCTree给每个bounding box encode了更相关的环境信息，因此可以预测更为复杂的relation</li><li>在training过程中一直在微调，故不易轻易过拟合</li></ul></li></ul></li><li>先验结构（链条，全连接图）的劣势<ul><li>chain：仅捕获简单的空间信息或共现偏差</li><li>完全连通图：完整，但在层次关系和平行关系间无区别；后续上下文编码过于饱和</li><li>共同劣势：与视觉环境的动态本质不兼容</li></ul></li><li>指标Mean Recall@K<ul><li>对50个relationship的类分别算Recall@K 然后求平均</li><li>优势：可以看出模型学习小样本的能力</li></ul></li><li>方法<ul><li>Feature Extraction</li><li>构建可学习的对称矩阵S<ul><li>计算S<img src="https://img-blog.csdnimg.cn/d4cf455fd8184c749701bc12d5c3500c.png" alt="在这里插入图片描述"></li><li>由矩阵S构造VCTree，转化为左孩子右兄弟结构</li></ul></li><li>使用双向TreeLSTM编码上下文<ul><li>物体级别</li><li>关系级别</li></ul></li><li>解码上下文<ul><li>物体类别预测</li><li>谓语类别预测</li></ul></li><li>混合学习——监督式学习+强化学习</li></ul></li></ul><h2 id="5-Knowledge-Embedded-Routing-Network-for-Scene-Graph-Generation"><a href="#5-Knowledge-Embedded-Routing-Network-for-Scene-Graph-Generation" class="headerlink" title="5.Knowledge-Embedded Routing Network for Scene Graph Generation"></a>5.Knowledge-Embedded Routing Network for Scene Graph Generation</h2><h5 id="CVPR-2019-arXiv-1903-03326"><a href="#CVPR-2019-arXiv-1903-03326" class="headerlink" title="CVPR 2019  arXiv:1903.03326"></a>CVPR 2019 <strong><a href="https://arxiv.org/abs/1903.03326"> arXiv:1903.03326</a></strong></h5><ul><li>发现<ul><li>对象对之间统计相关性可以有效规范语义空间并降低预测模糊性，解决自然界中关系分配不均衡问题</li><li>且这种统计相关性可以通过结构化的知识图显式地表示</li></ul></li><li>贡献<ul><li>第一个明确地将统计知识与深层架构相结合，以用于加速场景图生成</li><li>开发知识嵌入式路由网络（Knowledge-Embedded Routing Network.），将统计相关性整合到深度神经网络中</li><li>路由机制，通过图传播消息以探索对象间交互</li><li>效果：对于有充足样本的关系提升不明显，但对于样本数有限的关系有着显著提升</li></ul></li><li>KERN模型<ul><li><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211128171006541.png" alt="image-20211128171006541"></li><li>生成物体区域【Faster RCNN detector】</li><li>构建将区域关联起来的图</li><li>学习上下文化特征表示，预测每个区域的类标签【a propagation network】</li><li>对于每个带有预测标签的对象对，构建图</li><li>探索关系与相应物体之间的交.互【another propagation network】</li></ul></li><li>指标<ul><li>recall@K【R@K】：易受大比例样本的影响</li><li>mean recall@K【mR@K】：更能综合反映对于所有关系的性能</li></ul></li></ul><h2 id="6-Scene-Graph-Generation-by-Iterative-Message-Passing"><a href="#6-Scene-Graph-Generation-by-Iterative-Message-Passing" class="headerlink" title="6.Scene Graph Generation by Iterative Message Passing"></a>6.Scene Graph Generation by Iterative Message Passing</h2><h5 id="CVPR-2017-arXiv-1701-02426"><a href="#CVPR-2017-arXiv-1701-02426" class="headerlink" title="CVPR 2017  arXiv:1701.02426"></a>CVPR 2017 <strong><a href="https://arxiv.org/abs/1701.02426"> arXiv:1701.02426</a></strong></h5><p><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211203220936802.png" alt="image-20211203220936802"></p><blockquote><p>文章参考CRF as RNN的方案，将graph的推断迭代问题建模为RNN方式，利用message passing提高精度。关于message passing的理解，CRF利用平均场方法来解，可以认为图是由顶点和边构成二分结构，利用平均场，所有对某个定点的影响是由其所连接的所有边造成的，反过来对于边也可解释。这样二分结构，通过动态规划迭代的方式求解，点对外的影响传递给边，同理边对外的影响传递给点，message就这样在点与边中交叉迭代的传递。</p></blockquote><ul><li><p>目标：从图像中生成以视觉为基础的场景图</p></li><li><p>贡献：并非孤立地推断场景图的每个组件，而是在场景图的一对二部子图之间传递包含上下文信息的消息，并使用RNN迭代地改进其预测。</p><ul><li>采用一种新颖的推理公式（物体之间局部的关系与上下文信息之间的共同推理）</li></ul></li><li><p>模型</p><ul><li><strong>利用RNN推理</strong> 利用mean field对graph做近似逼近，将点和边分开解耦。采用两个GRU单元分别对node和edge进行建模. 边GRU连接着是结点GRU，反之亦然。沿此结构传递消息形成两个互不相交的子图（彼此是对偶图）</li><li><strong>对偶更新和message pooling</strong> 利用场景图独特的二部结构，以进一步提高推理效率。node和edge满足二分图拓扑结构（分为<code>node-centric</code>（以节点为中心的原始图）和<code>edge-centric</code>（以边为中心的对偶图），图的推断可以利用二者通过<code>message passing</code>方式迭代求解，而非通过一个全连接图。）</li></ul></li><li><p>效果（针对graph generation problem。实验也验证了在支持关系预测问题上的可行性）</p><ul><li><p>两次迭代效果最好（随着迭代次数增多，噪音渗入会阻碍最终结果预测）</p></li><li><p>利用上下文信息，能一定程度上解决关系标注中不均匀分布问题</p></li><li><p>另外，baseline存在主语和宾语混淆、环形关系预测（like <vase-in-flower-in-vase>）的问题</p></li></ul></li></ul><h2 id="7-Scene-Graph-Generation-from-Objects-Phrases-and-Region-Captions"><a href="#7-Scene-Graph-Generation-from-Objects-Phrases-and-Region-Captions" class="headerlink" title="7.Scene Graph Generation from Objects, Phrases and Region Captions"></a>7.Scene Graph Generation from Objects, Phrases and Region Captions</h2><h5 id="ICCV-2017-arXiv-1707-09700"><a href="#ICCV-2017-arXiv-1707-09700" class="headerlink" title="ICCV 2017  arXiv:1707.09700"></a>ICCV 2017 <strong><a href="https://arxiv.org/abs/1707.09700"> arXiv:1707.09700</a></strong></h5><ul><li><p>摘要</p><ul><li>利用<u>语义层之间的相互联系</u>，提出了Multi-level Scene Description Network (denoted as MSDN)，用于以端到端的方式共同解决物体检测、场景图生成与区域标注三个视觉任务。</li></ul></li><li><p>发现Observation</p><ul><li><p>场景图（scene graph）是在图像检测到的物体（object detection）上生成的并预测了对象间的关系，而区域标注（region captioning）则给出了物体、属性、关系和其他上下文信息的语言描述——三个任务彼此间有联系，但是不同任务间的弱对齐使得联合学习模型变得困难</p></li><li><p>三个任务的特征高度相关，并且可以互为补充信息</p><blockquote><p>三元组phrase印证了object的存在，region captions提供对对象的存在、属性以及关系的约束</p></blockquote></li><li><p>连接三种任务的关键是利用视觉特征空间和语义的联系</p></li></ul></li><li><p>贡献</p><ul><li>Multi-level Scene Description Network (MSDN)模型用于同时解决三个视觉任务</li><li>CNN动态构造图layer，使得对齐对象、短语与区域标注</li><li>特征微调结构用于传递不同语义层间的信息</li></ul></li><li><p>模型MSDN</p><ul><li><p><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211206214209328.png" alt="image-20211206214209328"></p></li><li><p>Region Proposal：利用RPN生成ROIs，RPNs之间的锚点采用k-means聚类得到</p></li><li><p>Feature Specialization：生成特定特征</p></li><li><p>Dynamic Graph Construction</p></li><li><p>Feature Refining</p><ul><li>分为三个并行的步骤</li></ul><p><img src="C:\Users\SHR\AppData\Roaming\Typora\typora-user-images\image-20211208204013910.png" alt="image-20211208204013910"></p></li><li><p>Scene Graph Generation：利用细化的特征做最后预测</p></li></ul></li><li><p>实验</p><ul><li>Loss function<ul><li>**object  **object classification:cross-entropy loss + box regression:smooth L1 loss</li><li><strong>phrase</strong>  predict the labels of predicates:cross-entropy loss</li><li>**caption  **generate the every word of free-form sentences:cross-entropy loss + regress the corresponding proposals:smooth L1 loss</li></ul></li><li>指标：Rec@K</li></ul></li></ul><h2 id="8-Decoupling-Representation-and-Classifier-for-Long-Tailed-Recognition"><a href="#8-Decoupling-Representation-and-Classifier-for-Long-Tailed-Recognition" class="headerlink" title="8.Decoupling Representation and Classifier for Long-Tailed Recognition"></a>8.Decoupling Representation and Classifier for Long-Tailed Recognition</h2><h5 id="ICLR-2020-arXiv-1910-09217"><a href="#ICLR-2020-arXiv-1910-09217" class="headerlink" title="ICLR 2020  arXiv:1910.09217"></a>ICLR 2020 <strong><a href="https://arxiv.org/abs/1910.09217"> arXiv:1910.09217</a></strong></h5><ul><li><p>摘要</p><ul><li>问题：解决类不平衡分布问题，现有方法采用共同学习表示(representation)和分类(classifier)<ul><li>无法区分长尾识别能力是通过学习更好的表示，还是通过改变分类器决策边界更好地处理数据不平衡达到的</li></ul></li><li>做法：将学习过程解耦为表征学习和分类，并系统地探讨不同的平衡策略对长尾识别的影响</li><li>finding<ul><li>在学习高质量表征时，数据不平衡可能不是问题</li><li>使用最简单的实例平衡采样学习表示，也可以仅通过调整分类器来实现强大的长尾识别能力</li></ul></li><li>效果：解耦后，使用最直接的做法效果比复杂模型更好</li></ul></li><li><p>发现</p><ul><li>解耦学习表示和分类有很好效果</li><li>重新调整联合学习的分类器所指定的决策边界，有利于长尾识别。其实现方式：再训练分类器与类平衡抽样；<u>分类器权重归一化</u>（简单有效）</li><li>将解耦学习方法应用于标准网络，比现有先进方法准确性更高</li></ul></li><li><p>Representations — sample strategy</p><ul><li>实例平衡（Instance-balanced sampling）：每一个训练用例有平等的机会被选择</li><li>类平衡（Class-balanced sampling）：每个类有平等的机会被选择。两阶段策略，首先类并均匀选择，其次这个类中的实例被均匀采样</li><li>平方根采样（Square-root sampling）</li><li>Progressively-balanced sampling：混合采样方法</li></ul></li><li><p>Classification</p><ul><li><p>Classifier Re-training (cRT)：固定住表示，用类平衡采样重新训练分类器</p></li><li><p>Nearest Class Mean classifier (NCM)：首先将training set里的每个类别计算feature representaitions的均值，然后在test set上执行最近邻查找。或者将mean features进行L2-Normalization之后，使用余弦距离或者欧氏距离计算相似度。</p><blockquote><p>余弦相似度可以通过其本身的normalization特性来缓解weight imbalance的问题</p></blockquote></li><li><p>τ-normalized classifier (τ-normalized)：在实例均衡抽样联合训练后，权值的均值与类数目相关。—&gt;重新平衡分类器的决策边界</p><blockquote><p>当 <code>τ = 1</code> 时，就是标准的L2-Normalization；当<code>τ = 0</code> 时，表示没有进行scaling操作。 <code>τ ∈ ( 0 , 1 ) </code>，其值是通过cross-validation来选择的。</p></blockquote></li><li><p>Learnable weight scaling (LWS)：将<code>fi</code>看作是一个可学习的参数，通过固定住representations和classifier两部分的weighs来只学习这个scaling factors。重新缩放大小为每个分类器保持方向不变</p></li></ul></li><li><p>训练注意事项</p><ul><li>表征学习阶段<ul><li>学习过程中保持网络结构（比如 global pooling 之后不需要增加额外的全连接层）、超参数选择、学习率和 batch size 的关系和正常分类问题一致（比如 ImageNet），以确保表征学习的质量。</li><li>类别均衡采样：采用多 GPU 实现的时候，需要考虑使得每块设备上都有较为均衡的类别样本，避免出现样本种类在卡上过于单一，从而使得 BN 的参数估计不准。</li><li>渐进式均衡采样：为提升采样速度，该采样方式可以分两步进行。第一步先从类别中选择所需类别，第二步从对应类别中随机选择样本。</li></ul></li><li>分类器学习阶段<ul><li>重新学习分类器（cRT）：重新随机初始化分类器或者继承特征表示学习阶段的分类器，重点在于保证学习率重置到起始大小并选择 cosine 学习率。</li><li>τ-归一化（tau-normalization）：τ 的选取在验证集上进行，如果没有验证集可以从训练集模仿平衡验证集。</li><li>可学习参数放缩（LWS）：学习率的选择与 cRT 一致，学习过程中要保证分类器参数固定不变，只学习放缩因子。</li></ul></li></ul></li></ul><h2 id="9-Bipartite-Graph-Network-with-Adaptive-Message-Passing-for-Unbiased-Scene-Graph-Generation"><a href="#9-Bipartite-Graph-Network-with-Adaptive-Message-Passing-for-Unbiased-Scene-Graph-Generation" class="headerlink" title="9.Bipartite Graph Network with Adaptive Message Passing for Unbiased Scene Graph Generation"></a>9.Bipartite Graph Network with Adaptive Message Passing for Unbiased Scene Graph Generation</h2><h5 id="CVPR-2021-10-1109-x2F-cvpr46437-2021-01096"><a href="#CVPR-2021-10-1109-x2F-cvpr46437-2021-01096" class="headerlink" title="CVPR 2021 10.1109&#x2F;cvpr46437.2021.01096"></a>CVPR 2021 10.1109&#x2F;cvpr46437.2021.01096</h5><ul><li>场景图生成遇到的挑战：固有的长尾分布；类内变化大；很多类别缺少充分标注</li><li>发现<ul><li>基线模型通过消除有噪声的主体与客体的关联可以实现显著的性能提升</li></ul></li><li>贡献<ul><li>提出具有自适应信息传播机制的置信敏感二部图神经网络BGNN，消除错误信息传播并实现有效的上下文建模<ul><li>采用假设-分类策略，首先从proposal generation network生成一系列可视化实体和谓词提案，继而通过一个多阶段BGNN来计算这些建议的上下文感知表示</li><li>以有向边作为二部图来建模实体和关系之间的不同信息流，并采用基于关系置信估计的自适应消息传播策略来降低上下文建模中的噪声</li></ul></li><li>一种有效的双层数据重采样策略，用于消除数据分布不平衡的问题<ul><li>图像层面的上采样+实例层面下采样</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> OMP_NUM_THREADS=1</span><br><span class="line"><span class="built_in">export</span> gpu_num=2</span><br><span class="line"><span class="built_in">export</span> CUDA_VISIBLE_DEVICES=<span class="string">&quot;0,1&quot;</span></span><br><span class="line"></span><br><span class="line">exp_name=<span class="string">&quot;MOTIF-RESAMPLING&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python -m torch.distributed.launch --master_port 10028 --nproc_per_node=<span class="variable">$gpu_num</span> \</span><br><span class="line">       tools/relation_train_net.py \</span><br><span class="line">       --config-file <span class="string">&quot;configs/e2e_relation_R_50_C4_1x_motifs.yaml&quot;</span> \</span><br><span class="line">       DEBUG False\</span><br><span class="line">       MODEL.ROI_RELATION_HEAD.USE_GT_BOX True \</span><br><span class="line">       MODEL.ROI_RELATION_HEAD.USE_GT_OBJECT_LABEL True \</span><br><span class="line">       MODEL.ROI_RELATION_HEAD.DATA_RESAMPLING_PARAM.REPEAT_FACTOR 0.07 \</span><br><span class="line">       MODEL.ROI_RELATION_HEAD.DATA_RESAMPLING_PARAM.INSTANCE_DROP_RATE 0.7 \</span><br><span class="line">       EXPERIMENT_NAME <span class="string">&quot;<span class="variable">$exp_name</span>&quot;</span> \</span><br><span class="line">        SOLVER.IMS_PER_BATCH $[3*<span class="variable">$gpu_num</span>] \</span><br><span class="line">        TEST.IMS_PER_BATCH $[<span class="variable">$gpu_num</span>] \</span><br><span class="line">        SOLVER.VAL_PERIOD 2000 \</span><br><span class="line">       MODEL.PRETRAINED_DETECTOR_CKPT /home/shr/pysgg/checkpoints/detection/pretrained_faster_rcnn/model_final.pth \</span><br><span class="line">        SOLVER.CHECKPOINT_PERIOD 2000 </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习ing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu常用指令</title>
    <link href="/2022/10/19/ubuntu%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/10/19/ubuntu%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu常用指令"><a href="#ubuntu常用指令" class="headerlink" title="ubuntu常用指令"></a>ubuntu常用指令</h2><ul><li>当前文件夹下文件数量</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | grep <span class="string">&quot;-&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure></blockquote><ul><li>当前文件夹下 各文件夹的大小</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h --max-depth=1</span><br></pre></td></tr></table></figure></blockquote><ul><li>压缩文件夹</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r archive_name.zip filename</span><br></pre></td></tr></table></figure></blockquote><ul><li>解压tar文件</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf etc.tar -C /date/</span><br></pre></td></tr></table></figure></blockquote><ul><li>Scp 进行文件的传输</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P ssh端口 -r 远程服务用户名@服务器ip:远程文件或目录 本地文件或目录</span><br></pre></td></tr></table></figure></blockquote><ul><li>conda 删除环境</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n your_env_name --all</span><br></pre></td></tr></table></figure></blockquote><ul><li>文件的重命名与移动</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> A B</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac使用笔记</title>
    <link href="/2022/10/19/mac%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/19/mac%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="macOS-使用记录"><a href="#macOS-使用记录" class="headerlink" title="macOS 使用记录"></a>macOS 使用记录</h2><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><p>浏览器切换至上一个窗口 contral+tab</p></li><li><p>浏览器切换至下一个窗口 contral+shift+tab</p></li><li><p>选择窗口 Command + 1-9</p></li><li><p>End &#x3D; fn + -&gt;</p></li><li><p>快速删除       Command + 删除</p></li><li><p>快速重命名   Command + 回车</p></li><li><p>进入&#x2F;退出全屏。Command+ control + F</p></li></ul><h4 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h4><ul><li>ctrl+r 运行脚本</li><li>ctrl+shift+r 运行当前脚本</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好词好句</title>
    <link href="/2022/10/19/%E5%A5%BD%E8%AF%8D%E5%A5%BD%E5%8F%A5/"/>
    <url>/2022/10/19/%E5%A5%BD%E8%AF%8D%E5%A5%BD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h3><ul><li>Discriminative</li><li>sufficient</li><li>dynamic</li><li>relative</li><li>advanced</li><li>Essential</li><li>Prevalent</li><li>Inevitable</li><li>Adaptive</li><li>Noteworthy</li><li>simplicity and flexibility</li><li>Stand-alone       单独的</li><li>persuasive         有说服力的</li><li>appropriate</li><li>considerable</li><li>crucial</li><li>dramatic</li><li>remarkable</li><li>striking</li><li>vital</li><li>worthwhile</li><li>ambiguous</li><li>confused</li><li>Incapable of</li><li>incompatible with     不符合</li><li>alternative</li><li>Meaningful </li><li>Over-simplistic </li><li>far from optimal</li><li>Constantly</li><li>rigorously   严谨的</li><li>acceptable</li><li>Problematical </li><li>reasonable</li><li>Unavoidable </li><li>Negligible </li><li>Extreme </li><li>apparent</li><li>imperceptible      不易察觉的</li><li>noticeable</li><li>overwhelming        压倒性的</li><li>conceivable       可想而知</li><li>compelling          令人信服的</li><li>extraordinary</li><li>ideal</li><li>outstanding</li><li>convincing</li><li>feasible</li><li>Intuitively</li></ul><h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><ul><li>Adjust</li><li>adapt</li><li>Discriminate</li><li>depict</li><li>complement</li><li>Acquired from</li><li>anticipate</li><li>Alleviate</li><li>Exhibit</li><li>Aiming at</li><li>cope with</li><li>Encounter</li><li>Incorporate</li><li>globally grasp the content</li><li>impose constraint on</li><li>signal a change </li><li>Attract much attention&#x2F;interest</li><li>interpret</li><li>imply</li><li>realise</li><li>undertake</li><li>develop</li><li>Simulate </li><li>remain unstudied</li><li>Facilitate</li><li>communicate</li><li>devise        制定</li><li>facilitate</li><li>Refine</li><li>Ascribe&#x2F;attribute  to</li><li>reinforce</li><li>speculate 猜测</li><li>boost the segmentation accuracy</li><li>facilitate the diagnosis &#x2F; assessing the severity and prognosis of the disease</li><li>Take … as input</li></ul><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><ul><li>defect &#x2F; flaw &#x2F; lack </li><li>Intention </li><li>Counterpart</li></ul><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ul><li>due to &#x2F; on account of &#x2F; in the view of(the fact that) 表理由</li><li>Therefore &#x2F; consequently &#x2F; hence &#x2F; which is why &#x2F; so &#x2F; as a result.  表原因</li><li>whereas &#x2F; on the other hand &#x2F; by contrast &#x2F; while                             表转折</li><li>nevertheless &#x2F; nonetheless &#x2F; notwithstanding &#x2F; in spite of&#x2F; regardlesss of 表尽管</li><li>in addition &#x2F; moreover &#x2F; furthermore &#x2F; apart from that &#x2F; secondly &#x2F; what is more. 表另外</li><li>for the sake of</li><li>Offer a means of</li><li>so as to</li><li>to take advantage of</li><li>with the intention of</li><li>as described&#x2F;explained&#x2F;proposed&#x2F;reported&#x2F;suggested in&#x2F;by</li><li>Generally speaking &#x2F; in the main &#x2F;</li></ul><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><ul><li>achieve overall significant improvements over …</li><li>Improvement on .. is the most salient</li><li>the improvement is especially significant</li><li>slightly inferior</li><li>show the evident benefit</li><li>邀请看结果的连接词见P138</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>via</li><li>in terms of</li><li>in contrast</li><li>To be more specific</li><li>depending on a range of factors</li></ul><h3 id="时态和语法"><a href="#时态和语法" class="headerlink" title="时态和语法"></a>时态和语法</h3><ul><li>一般时态用于陈述事实，也可用在Results中加强文章结果的可信度</li><li>一般时态用于描述大家常用的方法；过去时态用于描述自己做的创新</li><li>第一次指代时用a，当大家都清楚指代的是哪个之后，用the</li><li>当只有一种可能的指代时，可用the</li><li>摘要：过去方法的问题和这篇文章做了什么用一般时态；我们具体是怎么做的可用过去时态；结果可用一般时态；成果可用完成时态；应用可用一般时态。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>writing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/17/hello-world/"/>
    <url>/2022/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
